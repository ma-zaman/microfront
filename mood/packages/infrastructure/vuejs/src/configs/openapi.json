{
  "openapi": "3.0.2",
  "info": {
    "title": "MOOD API",
    "description": "API used to manage MOOD Services",
    "version": "0.20.0-dirty"
  },
  "paths": {
    "/v1/tenants": {
      "get": {
        "tags": ["Tenants"],
        "summary": "List tenants",
        "operationId": "v1_list_tenants",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Offset",
              "minimum": 0.0,
              "type": "integer",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "minimum": 0.0,
              "type": "integer",
              "default": 100
            },
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response V1 List Tenants",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TenantLightDisplay"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ContextUser": []
          }
        ]
      },
      "post": {
        "tags": ["Tenants"],
        "summary": "Create a new tenant",
        "operationId": "v1_create_tenant",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TenantCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDisplay"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ContextUser": []
          }
        ]
      }
    },
    "/v1/tenants/{target}": {
      "get": {
        "tags": ["Tenants"],
        "summary": "Read a tenant by id or name",
        "operationId": "v1_read_tenant",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Target",
              "type": "string"
            },
            "name": "target",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDisplay"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ContextUser": []
          }
        ]
      },
      "put": {
        "tags": ["Tenants"],
        "summary": "Update a tenant by id or name",
        "operationId": "v1_update_tenant",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Target",
              "type": "string"
            },
            "name": "target",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TenantUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDisplay"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "410": {
            "description": "Gone",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ContextUser": []
          }
        ]
      },
      "delete": {
        "tags": ["Tenants"],
        "summary": "Delete a tenant by id or name",
        "operationId": "v1_delete_tenant",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Target",
              "type": "string"
            },
            "name": "target",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ContextUser": []
          }
        ]
      }
    },
    "/v1/acls": {
      "get": {
        "tags": ["Access Control"],
        "summary": "Get all users",
        "operationId": "v1_list_users",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response V1 List Users",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "ContextTenant": []
          },
          {
            "ContextUser": []
          }
        ]
      },
      "post": {
        "tags": ["Access Control"],
        "summary": "Create a membership relation for a user (admins, members)",
        "operationId": "v1_create_users",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateBatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDisplayBatch"
                }
              }
            }
          },
          "206": {
            "description": "Partial Content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDisplayBatch"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ContextTenant": []
          },
          {
            "ContextUser": []
          }
        ]
      },
      "delete": {
        "tags": ["Access Control"],
        "summary": "Remove several users membership relation",
        "operationId": "v1_delete_users",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Users",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ContextTenant": []
          },
          {
            "ContextUser": []
          }
        ]
      }
    },
    "/v1/acls/{user}": {
      "get": {
        "tags": ["Access Control"],
        "summary": "Get user relations",
        "operationId": "v1_read_user",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User",
              "type": "string"
            },
            "name": "user",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response V1 Read User",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ContextTenant": []
          },
          {
            "ContextUser": []
          }
        ]
      },
      "delete": {
        "tags": ["Access Control"],
        "summary": "Remove user's membership relation",
        "operationId": "v1_delete_user",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User",
              "type": "string"
            },
            "name": "user",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ContextTenant": []
          },
          {
            "ContextUser": []
          }
        ]
      }
    },
    "/v1/instances/{instance}": {
      "get": {
        "tags": ["Instances"],
        "summary": "Get all instances",
        "operationId": "v1_list_instances",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/InstanceEnum"
            },
            "name": "instance",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset",
              "minimum": 0.0,
              "type": "integer",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "minimum": 0.0,
              "type": "integer",
              "default": 100
            },
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response V1 List Instances",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InstanceDisplay"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ContextTenant": []
          },
          {
            "ContextUser": []
          }
        ]
      },
      "post": {
        "tags": ["Instances"],
        "summary": "Create prometheus, alertmanager or victoriametrics instance",
        "operationId": "v1_create_instance",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/InstanceEnum"
            },
            "name": "instance",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstanceCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceDisplay"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ContextTenant": []
          },
          {
            "ContextUser": []
          }
        ]
      }
    },
    "/v1/instances/{instance}/{target}/config": {
      "post": {
        "tags": ["Instances"],
        "summary": "Apply given configuration to prometheus or alertmanager instance",
        "operationId": "v1_bind_instance_config",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/InstanceEnum"
            },
            "name": "instance",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Target",
              "type": "string"
            },
            "name": "target",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigBind"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ContextTenant": []
          },
          {
            "ContextUser": []
          }
        ]
      }
    },
    "/v1/instances/{instance}/{target}": {
      "get": {
        "tags": ["Instances"],
        "summary": "Retrieve instance info from given filter (id or name)",
        "operationId": "v1_read_instance",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/InstanceEnum"
            },
            "name": "instance",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Target",
              "type": "string"
            },
            "name": "target",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceDisplay"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ContextTenant": []
          },
          {
            "ContextUser": []
          }
        ]
      },
      "put": {
        "tags": ["Instances"],
        "summary": "Update instance info from given filter (id or name)",
        "operationId": "v1_update_instance",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/InstanceEnum"
            },
            "name": "instance",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Target",
              "type": "string"
            },
            "name": "target",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstanceUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceDisplay"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ContextTenant": []
          },
          {
            "ContextUser": []
          }
        ]
      },
      "delete": {
        "tags": ["Instances"],
        "summary": "Remove instance from given filter (id or name)",
        "operationId": "v1_delete_instance",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/InstanceEnum"
            },
            "name": "instance",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Target",
              "type": "string"
            },
            "name": "target",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ContextTenant": []
          },
          {
            "ContextUser": []
          }
        ]
      }
    },
    "/v1/configs/{config}": {
      "get": {
        "tags": ["Configurations"],
        "summary": "Get all configurations",
        "operationId": "v1_list_configs",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ConfigEnum"
            },
            "name": "config",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset",
              "minimum": 0.0,
              "type": "integer",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "minimum": 0.0,
              "type": "integer",
              "default": 100
            },
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response V1 List Configs",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConfigDisplay"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ContextTenant": []
          },
          {
            "ContextUser": []
          }
        ]
      },
      "post": {
        "tags": ["Configurations"],
        "summary": "Create prometheus or alertmanager configuration",
        "operationId": "v1_create_config",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ConfigEnum"
            },
            "name": "config",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigCreate",
                "title": "ConfigCreate",
                "required": ["name", "data"],
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Configuration name",
                    "maxLength": 64,
                    "minLength": 3,
                    "pattern": "(?!^all$)(^[0-9a-zA-Z][0-9a-zA-Z\\-]+[0-9a-zA-Z]$)",
                    "type": "string",
                    "example": "my-configuration"
                  },
                  "description": {
                    "title": "Configuration description",
                    "maxLength": 512,
                    "type": "string",
                    "default": "",
                    "example": "My comprehensive configuration description"
                  },
                  "data": {
                    "title": "Configuration data",
                    "example": {}
                  },
                  "id": {
                    "title": "Configuration identifier",
                    "type": "string",
                    "format": "uuid",
                    "example": "00000000-0000-0000-0000-000000000000"
                  },
                  "tenant": {
                    "title": "SQLalchemy Tenant db model"
                  }
                },
                "description": "ConfigCreate\n    id (UUID): Configuration identifier\n    tenant (models/Tenant): SQLalchemy Tenant db model\n\nAttributes:\n    name (str): Configuration name\n    data (Any): Configuration payload",
                "example": {
                  "name": "my-configuration",
                  "description": "My comprehensive configuration description",
                  "data": {}
                }
              }
            },
            "application/x-yaml": {
              "schema": {
                "title": "ConfigCreate",
                "required": ["name", "data"],
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Configuration name",
                    "maxLength": 64,
                    "minLength": 3,
                    "pattern": "(?!^all$)(^[0-9a-zA-Z][0-9a-zA-Z\\-]+[0-9a-zA-Z]$)",
                    "type": "string",
                    "example": "my-configuration"
                  },
                  "description": {
                    "title": "Configuration description",
                    "maxLength": 512,
                    "type": "string",
                    "default": "",
                    "example": "My comprehensive configuration description"
                  },
                  "data": {
                    "title": "Configuration data",
                    "example": {}
                  },
                  "id": {
                    "title": "Configuration identifier",
                    "type": "string",
                    "format": "uuid",
                    "example": "00000000-0000-0000-0000-000000000000"
                  },
                  "tenant": {
                    "title": "SQLalchemy Tenant db model"
                  }
                },
                "description": "ConfigCreate\n    id (UUID): Configuration identifier\n    tenant (models/Tenant): SQLalchemy Tenant db model\n\nAttributes:\n    name (str): Configuration name\n    data (Any): Configuration payload",
                "example": {
                  "name": "my-configuration",
                  "description": "My comprehensive configuration description",
                  "data": {}
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigDisplay",
                  "title": "ConfigDisplay",
                  "required": ["name", "data", "id", "related_instances"],
                  "type": "object",
                  "properties": {
                    "name": {
                      "title": "Configuration name",
                      "maxLength": 64,
                      "minLength": 3,
                      "pattern": "(?!^all$)(^[0-9a-zA-Z][0-9a-zA-Z\\-]+[0-9a-zA-Z]$)",
                      "type": "string",
                      "example": "my-configuration"
                    },
                    "description": {
                      "title": "Configuration description",
                      "maxLength": 512,
                      "type": "string",
                      "default": "",
                      "example": "My comprehensive configuration description"
                    },
                    "data": {
                      "title": "Configuration data",
                      "example": {}
                    },
                    "id": {
                      "title": "Configuration identifier",
                      "type": "string",
                      "format": "uuid",
                      "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "related_instances": {
                      "title": "List of instances running the configuration",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "example": [
                        "00000000-0000-0000-0000-000000000000",
                        "11111111-1111-1111-1111-111111111111"
                      ]
                    },
                    "status": {
                      "title": "Configuration status",
                      "type": "string",
                      "example": "created"
                    }
                  },
                  "description": "ConfigDisplay\n\nAttributes:\n    id (UUID): Configuration identifier\n    status (str): Configuration validity status (pending, valid, invalid)\n    tenant_id (str): Tenant id (extra)\n\nInherited attributes:\n    name (str): Configuration name\n    data (dict[str, Any]): Configuration payload"
                }
              },
              "application/x-yaml": {
                "schema": {
                  "title": "ConfigDisplay",
                  "required": ["name", "data", "id", "related_instances"],
                  "type": "object",
                  "properties": {
                    "name": {
                      "title": "Configuration name",
                      "maxLength": 64,
                      "minLength": 3,
                      "pattern": "(?!^all$)(^[0-9a-zA-Z][0-9a-zA-Z\\-]+[0-9a-zA-Z]$)",
                      "type": "string",
                      "example": "my-configuration"
                    },
                    "description": {
                      "title": "Configuration description",
                      "maxLength": 512,
                      "type": "string",
                      "default": "",
                      "example": "My comprehensive configuration description"
                    },
                    "data": {
                      "title": "Configuration data",
                      "example": {}
                    },
                    "id": {
                      "title": "Configuration identifier",
                      "type": "string",
                      "format": "uuid",
                      "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "related_instances": {
                      "title": "List of instances running the configuration",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "example": [
                        "00000000-0000-0000-0000-000000000000",
                        "11111111-1111-1111-1111-111111111111"
                      ]
                    },
                    "status": {
                      "title": "Configuration status",
                      "type": "string",
                      "example": "created"
                    }
                  },
                  "description": "ConfigDisplay\n\nAttributes:\n    id (UUID): Configuration identifier\n    status (str): Configuration validity status (pending, valid, invalid)\n    tenant_id (str): Tenant id (extra)\n\nInherited attributes:\n    name (str): Configuration name\n    data (dict[str, Any]): Configuration payload"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ContextTenant": []
          },
          {
            "ContextUser": []
          }
        ]
      }
    },
    "/v1/configs/{config}/{target}": {
      "get": {
        "tags": ["Configurations"],
        "summary": "Retrieve configuration info from given filter (id or name)",
        "operationId": "v1_read_config",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ConfigEnum"
            },
            "name": "config",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Target",
              "type": "string"
            },
            "name": "target",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigDisplay",
                  "title": "ConfigDisplay",
                  "required": ["name", "data", "id", "related_instances"],
                  "type": "object",
                  "properties": {
                    "name": {
                      "title": "Configuration name",
                      "maxLength": 64,
                      "minLength": 3,
                      "pattern": "(?!^all$)(^[0-9a-zA-Z][0-9a-zA-Z\\-]+[0-9a-zA-Z]$)",
                      "type": "string",
                      "example": "my-configuration"
                    },
                    "description": {
                      "title": "Configuration description",
                      "maxLength": 512,
                      "type": "string",
                      "default": "",
                      "example": "My comprehensive configuration description"
                    },
                    "data": {
                      "title": "Configuration data",
                      "example": {}
                    },
                    "id": {
                      "title": "Configuration identifier",
                      "type": "string",
                      "format": "uuid",
                      "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "related_instances": {
                      "title": "List of instances running the configuration",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "example": [
                        "00000000-0000-0000-0000-000000000000",
                        "11111111-1111-1111-1111-111111111111"
                      ]
                    },
                    "status": {
                      "title": "Configuration status",
                      "type": "string",
                      "example": "created"
                    }
                  },
                  "description": "ConfigDisplay\n\nAttributes:\n    id (UUID): Configuration identifier\n    status (str): Configuration validity status (pending, valid, invalid)\n    tenant_id (str): Tenant id (extra)\n\nInherited attributes:\n    name (str): Configuration name\n    data (dict[str, Any]): Configuration payload"
                }
              },
              "application/x-yaml": {
                "schema": {
                  "title": "ConfigDisplay",
                  "required": ["name", "data", "id", "related_instances"],
                  "type": "object",
                  "properties": {
                    "name": {
                      "title": "Configuration name",
                      "maxLength": 64,
                      "minLength": 3,
                      "pattern": "(?!^all$)(^[0-9a-zA-Z][0-9a-zA-Z\\-]+[0-9a-zA-Z]$)",
                      "type": "string",
                      "example": "my-configuration"
                    },
                    "description": {
                      "title": "Configuration description",
                      "maxLength": 512,
                      "type": "string",
                      "default": "",
                      "example": "My comprehensive configuration description"
                    },
                    "data": {
                      "title": "Configuration data",
                      "example": {}
                    },
                    "id": {
                      "title": "Configuration identifier",
                      "type": "string",
                      "format": "uuid",
                      "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "related_instances": {
                      "title": "List of instances running the configuration",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "example": [
                        "00000000-0000-0000-0000-000000000000",
                        "11111111-1111-1111-1111-111111111111"
                      ]
                    },
                    "status": {
                      "title": "Configuration status",
                      "type": "string",
                      "example": "created"
                    }
                  },
                  "description": "ConfigDisplay\n\nAttributes:\n    id (UUID): Configuration identifier\n    status (str): Configuration validity status (pending, valid, invalid)\n    tenant_id (str): Tenant id (extra)\n\nInherited attributes:\n    name (str): Configuration name\n    data (dict[str, Any]): Configuration payload"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ContextTenant": []
          },
          {
            "ContextUser": []
          }
        ]
      },
      "put": {
        "tags": ["Configurations"],
        "summary": "Update configuration info from given filter (id or name)",
        "operationId": "v1_update_config",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ConfigEnum"
            },
            "name": "config",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Target",
              "type": "string"
            },
            "name": "target",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigUpdate",
                "title": "ConfigUpdate",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Configuration name",
                    "maxLength": 64,
                    "minLength": 3,
                    "pattern": "(?!^all$)(^[0-9a-zA-Z][0-9a-zA-Z\\-]+[0-9a-zA-Z]$)",
                    "type": "string",
                    "example": "my-configuration"
                  },
                  "description": {
                    "title": "Configuration description",
                    "maxLength": 512,
                    "type": "string",
                    "example": "My comprehensive configuration description"
                  },
                  "data": {
                    "title": "Configuration data",
                    "example": {}
                  },
                  "status": {
                    "title": "Background task status",
                    "maxLength": 2048,
                    "minLength": 3,
                    "type": "string",
                    "example": "pending"
                  }
                },
                "description": "ConfigUpdate class\n\nAttributes:\n    name (str): Configuration name\n    description (str): Configuration description\n    data (dict[str, Any]): Configuration payload\n    status (str): Configuration validity status (pending, valid, invalid)",
                "example": {
                  "name": "my-configuration",
                  "description": "My comprehensive configuration description",
                  "data": {}
                }
              }
            },
            "application/x-yaml": {
              "schema": {
                "title": "ConfigUpdate",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Configuration name",
                    "maxLength": 64,
                    "minLength": 3,
                    "pattern": "(?!^all$)(^[0-9a-zA-Z][0-9a-zA-Z\\-]+[0-9a-zA-Z]$)",
                    "type": "string",
                    "example": "my-configuration"
                  },
                  "description": {
                    "title": "Configuration description",
                    "maxLength": 512,
                    "type": "string",
                    "example": "My comprehensive configuration description"
                  },
                  "data": {
                    "title": "Configuration data",
                    "example": {}
                  },
                  "status": {
                    "title": "Background task status",
                    "maxLength": 2048,
                    "minLength": 3,
                    "type": "string",
                    "example": "pending"
                  }
                },
                "description": "ConfigUpdate class\n\nAttributes:\n    name (str): Configuration name\n    description (str): Configuration description\n    data (dict[str, Any]): Configuration payload\n    status (str): Configuration validity status (pending, valid, invalid)",
                "example": {
                  "name": "my-configuration",
                  "description": "My comprehensive configuration description",
                  "data": {}
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigDisplay",
                  "title": "ConfigDisplay",
                  "required": ["name", "data", "id", "related_instances"],
                  "type": "object",
                  "properties": {
                    "name": {
                      "title": "Configuration name",
                      "maxLength": 64,
                      "minLength": 3,
                      "pattern": "(?!^all$)(^[0-9a-zA-Z][0-9a-zA-Z\\-]+[0-9a-zA-Z]$)",
                      "type": "string",
                      "example": "my-configuration"
                    },
                    "description": {
                      "title": "Configuration description",
                      "maxLength": 512,
                      "type": "string",
                      "default": "",
                      "example": "My comprehensive configuration description"
                    },
                    "data": {
                      "title": "Configuration data",
                      "example": {}
                    },
                    "id": {
                      "title": "Configuration identifier",
                      "type": "string",
                      "format": "uuid",
                      "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "related_instances": {
                      "title": "List of instances running the configuration",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "example": [
                        "00000000-0000-0000-0000-000000000000",
                        "11111111-1111-1111-1111-111111111111"
                      ]
                    },
                    "status": {
                      "title": "Configuration status",
                      "type": "string",
                      "example": "created"
                    }
                  },
                  "description": "ConfigDisplay\n\nAttributes:\n    id (UUID): Configuration identifier\n    status (str): Configuration validity status (pending, valid, invalid)\n    tenant_id (str): Tenant id (extra)\n\nInherited attributes:\n    name (str): Configuration name\n    data (dict[str, Any]): Configuration payload"
                }
              },
              "application/x-yaml": {
                "schema": {
                  "title": "ConfigDisplay",
                  "required": ["name", "data", "id", "related_instances"],
                  "type": "object",
                  "properties": {
                    "name": {
                      "title": "Configuration name",
                      "maxLength": 64,
                      "minLength": 3,
                      "pattern": "(?!^all$)(^[0-9a-zA-Z][0-9a-zA-Z\\-]+[0-9a-zA-Z]$)",
                      "type": "string",
                      "example": "my-configuration"
                    },
                    "description": {
                      "title": "Configuration description",
                      "maxLength": 512,
                      "type": "string",
                      "default": "",
                      "example": "My comprehensive configuration description"
                    },
                    "data": {
                      "title": "Configuration data",
                      "example": {}
                    },
                    "id": {
                      "title": "Configuration identifier",
                      "type": "string",
                      "format": "uuid",
                      "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "related_instances": {
                      "title": "List of instances running the configuration",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "example": [
                        "00000000-0000-0000-0000-000000000000",
                        "11111111-1111-1111-1111-111111111111"
                      ]
                    },
                    "status": {
                      "title": "Configuration status",
                      "type": "string",
                      "example": "created"
                    }
                  },
                  "description": "ConfigDisplay\n\nAttributes:\n    id (UUID): Configuration identifier\n    status (str): Configuration validity status (pending, valid, invalid)\n    tenant_id (str): Tenant id (extra)\n\nInherited attributes:\n    name (str): Configuration name\n    data (dict[str, Any]): Configuration payload"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ContextTenant": []
          },
          {
            "ContextUser": []
          }
        ]
      },
      "delete": {
        "tags": ["Configurations"],
        "summary": "Remove configuration from given filter (id or name)",
        "operationId": "v1_delete_config",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ConfigEnum"
            },
            "name": "config",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Target",
              "type": "string"
            },
            "name": "target",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ContextTenant": []
          },
          {
            "ContextUser": []
          }
        ]
      }
    },
    "/v1/configs/{config}/{target}/status": {
      "get": {
        "tags": ["Configurations"],
        "summary": "Retrieve configuration status from given filter (id or name)",
        "operationId": "v1_read_config_status",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ConfigEnum"
            },
            "name": "config",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Target",
              "type": "string"
            },
            "name": "target",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ContextTenant": []
          },
          {
            "ContextUser": []
          }
        ]
      }
    },
    "/v1/configs/{config}/{target}/data": {
      "get": {
        "tags": ["Configurations"],
        "summary": "Retrieve configuration data from given filter (id or name)",
        "operationId": "v1_read_config_data",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ConfigEnum"
            },
            "name": "config",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Target",
              "type": "string"
            },
            "name": "target",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigData",
                  "title": "ConfigData",
                  "type": "object",
                  "properties": {},
                  "description": "ConfigData class\n\nAttributes:\n    n/a: accept everything (parse later)"
                }
              },
              "application/x-yaml": {
                "schema": {
                  "title": "ConfigData",
                  "type": "object",
                  "properties": {},
                  "description": "ConfigData class\n\nAttributes:\n    n/a: accept everything (parse later)"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ContextTenant": []
          },
          {
            "ContextUser": []
          }
        ]
      },
      "put": {
        "tags": ["Configurations"],
        "summary": "Update configuration data from given filter (id or name)",
        "operationId": "v1_update_config_data",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ConfigEnum"
            },
            "name": "config",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Target",
              "type": "string"
            },
            "name": "target",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigData",
                "title": "ConfigData",
                "type": "object",
                "properties": {},
                "description": "ConfigData class\n\nAttributes:\n    n/a: accept everything (parse later)"
              }
            },
            "application/x-yaml": {
              "schema": {
                "title": "ConfigData",
                "type": "object",
                "properties": {},
                "description": "ConfigData class\n\nAttributes:\n    n/a: accept everything (parse later)"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigDisplay",
                  "title": "ConfigDisplay",
                  "required": ["name", "data", "id", "related_instances"],
                  "type": "object",
                  "properties": {
                    "name": {
                      "title": "Configuration name",
                      "maxLength": 64,
                      "minLength": 3,
                      "pattern": "(?!^all$)(^[0-9a-zA-Z][0-9a-zA-Z\\-]+[0-9a-zA-Z]$)",
                      "type": "string",
                      "example": "my-configuration"
                    },
                    "description": {
                      "title": "Configuration description",
                      "maxLength": 512,
                      "type": "string",
                      "default": "",
                      "example": "My comprehensive configuration description"
                    },
                    "data": {
                      "title": "Configuration data",
                      "example": {}
                    },
                    "id": {
                      "title": "Configuration identifier",
                      "type": "string",
                      "format": "uuid",
                      "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "related_instances": {
                      "title": "List of instances running the configuration",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "example": [
                        "00000000-0000-0000-0000-000000000000",
                        "11111111-1111-1111-1111-111111111111"
                      ]
                    },
                    "status": {
                      "title": "Configuration status",
                      "type": "string",
                      "example": "created"
                    }
                  },
                  "description": "ConfigDisplay\n\nAttributes:\n    id (UUID): Configuration identifier\n    status (str): Configuration validity status (pending, valid, invalid)\n    tenant_id (str): Tenant id (extra)\n\nInherited attributes:\n    name (str): Configuration name\n    data (dict[str, Any]): Configuration payload"
                }
              },
              "application/x-yaml": {
                "schema": {
                  "title": "ConfigDisplay",
                  "required": ["name", "data", "id", "related_instances"],
                  "type": "object",
                  "properties": {
                    "name": {
                      "title": "Configuration name",
                      "maxLength": 64,
                      "minLength": 3,
                      "pattern": "(?!^all$)(^[0-9a-zA-Z][0-9a-zA-Z\\-]+[0-9a-zA-Z]$)",
                      "type": "string",
                      "example": "my-configuration"
                    },
                    "description": {
                      "title": "Configuration description",
                      "maxLength": 512,
                      "type": "string",
                      "default": "",
                      "example": "My comprehensive configuration description"
                    },
                    "data": {
                      "title": "Configuration data",
                      "example": {}
                    },
                    "id": {
                      "title": "Configuration identifier",
                      "type": "string",
                      "format": "uuid",
                      "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "related_instances": {
                      "title": "List of instances running the configuration",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "example": [
                        "00000000-0000-0000-0000-000000000000",
                        "11111111-1111-1111-1111-111111111111"
                      ]
                    },
                    "status": {
                      "title": "Configuration status",
                      "type": "string",
                      "example": "created"
                    }
                  },
                  "description": "ConfigDisplay\n\nAttributes:\n    id (UUID): Configuration identifier\n    status (str): Configuration validity status (pending, valid, invalid)\n    tenant_id (str): Tenant id (extra)\n\nInherited attributes:\n    name (str): Configuration name\n    data (dict[str, Any]): Configuration payload"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ContextTenant": []
          },
          {
            "ContextUser": []
          }
        ]
      }
    },
    "/v1/-/healthy": {
      "get": {
        "tags": ["Management"],
        "summary": "API health check",
        "operationId": "v1_healthy",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          }
        }
      }
    },
    "/v1/-/ready": {
      "get": {
        "tags": ["Management"],
        "summary": "API ready check",
        "operationId": "v1_ready",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/v1/-/about": {
      "get": {
        "tags": ["Management"],
        "summary": "Get information about the API",
        "operationId": "v1_about",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/About"
                }
              }
            }
          }
        }
      }
    },
    "/v2/catalog": {
      "get": {
        "tags": ["Broker"],
        "summary": "Retrieve broker catalog of services and plans",
        "operationId": "v2_read_catalog",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catalog"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ContextBrokerAuth": []
          },
          {
            "ContextBrokerVersion": []
          }
        ]
      }
    },
    "/v2/service_instances/{instance_id}/last_operation": {
      "get": {
        "tags": ["Broker"],
        "summary": "Get the last requested operation state for service instance.",
        "operationId": "v2_read_instance_last_operation",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Instance Id",
              "type": "string"
            },
            "name": "instance_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Service Id",
              "type": "string"
            },
            "name": "service_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Plan Id",
              "type": "string"
            },
            "name": "plan_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Operation",
              "type": "string"
            },
            "name": "operation",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "X-Broker-Api-Originating-Identity",
              "type": "string"
            },
            "name": "X-Broker-API-Originating-Identity",
            "in": "header"
          },
          {
            "required": false,
            "schema": {
              "title": "X-Broker-Api-Request-Identity",
              "type": "string"
            },
            "name": "X-Broker-API-Request-Identity",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PollingInstanceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          },
          "410": {
            "description": "Gone",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ContextBrokerAuth": []
          },
          {
            "ContextBrokerVersion": []
          }
        ]
      }
    },
    "/v2/service_instances/{instance_id}/service_bindings/{binding_id}/last_operation": {
      "get": {
        "tags": ["Broker"],
        "summary": "Get the last requested operation state for service binding.",
        "operationId": "v2_read_binding_last_operation",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Instance Id",
              "type": "string"
            },
            "name": "instance_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Binding Id",
              "type": "string"
            },
            "name": "binding_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Service Id",
              "type": "string"
            },
            "name": "service_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Plan Id",
              "type": "string"
            },
            "name": "plan_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Operation",
              "type": "string"
            },
            "name": "operation",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "X-Broker-Api-Originating-Identity",
              "type": "string"
            },
            "name": "X-Broker-API-Originating-Identity",
            "in": "header"
          },
          {
            "required": false,
            "schema": {
              "title": "X-Broker-Api-Request-Identity",
              "type": "string"
            },
            "name": "X-Broker-API-Request-Identity",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PollingBindingResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          },
          "410": {
            "description": "Gone",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ContextBrokerAuth": []
          },
          {
            "ContextBrokerVersion": []
          }
        ]
      }
    },
    "/v2/service_instances/{instance_id}": {
      "get": {
        "tags": ["Broker"],
        "summary": "Fetch a service instance.",
        "operationId": "v2_read_service_instance",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Instance Id",
              "type": "string"
            },
            "name": "instance_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Service Id",
              "type": "string"
            },
            "name": "service_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Plan Id",
              "type": "string"
            },
            "name": "plan_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "X-Broker-Api-Originating-Identity",
              "type": "string"
            },
            "name": "X-Broker-API-Originating-Identity",
            "in": "header"
          },
          {
            "required": false,
            "schema": {
              "title": "X-Broker-Api-Request-Identity",
              "type": "string"
            },
            "name": "X-Broker-API-Request-Identity",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvisioningResponseFetch"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ContextBrokerAuth": []
          },
          {
            "ContextBrokerVersion": []
          }
        ]
      },
      "put": {
        "tags": ["Broker"],
        "summary": "Provision a service instance.",
        "operationId": "v2_create_service_instance",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Instance Id",
              "type": "string"
            },
            "name": "instance_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Accepts Incomplete",
              "type": "boolean"
            },
            "name": "accepts_incomplete",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "X-Broker-Api-Originating-Identity",
              "type": "string"
            },
            "name": "X-Broker-API-Originating-Identity",
            "in": "header"
          },
          {
            "required": false,
            "schema": {
              "title": "X-Broker-Api-Request-Identity",
              "type": "string"
            },
            "name": "X-Broker-API-Request-Identity",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProvisioningRequestCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvisioningResponseCreate"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvisioningResponseCreate"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ContextBrokerAuth": []
          },
          {
            "ContextBrokerVersion": []
          }
        ]
      },
      "delete": {
        "tags": ["Broker"],
        "summary": "Delete a service instance.",
        "operationId": "v2_delete_service_instance",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Instance Id",
              "type": "string"
            },
            "name": "instance_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Service Id",
              "type": "string"
            },
            "name": "service_id",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "Plan Id",
              "type": "string"
            },
            "name": "plan_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Accepts Incomplete",
              "type": "boolean"
            },
            "name": "accepts_incomplete",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "X-Broker-Api-Originating-Identity",
              "type": "string"
            },
            "name": "X-Broker-API-Originating-Identity",
            "in": "header"
          },
          {
            "required": false,
            "schema": {
              "title": "X-Broker-Api-Request-Identity",
              "type": "string"
            },
            "name": "X-Broker-API-Request-Identity",
            "in": "header"
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvisioningResponseDelete"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvisioningResponseDelete"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          },
          "410": {
            "description": "Gone",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ContextBrokerAuth": []
          },
          {
            "ContextBrokerVersion": []
          }
        ]
      },
      "patch": {
        "tags": ["Broker"],
        "summary": "Update a service instance.",
        "operationId": "v2_update_service_instance",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Instance Id",
              "type": "string"
            },
            "name": "instance_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Accepts Incomplete",
              "type": "boolean"
            },
            "name": "accepts_incomplete",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "X-Broker-Api-Originating-Identity",
              "type": "string"
            },
            "name": "X-Broker-API-Originating-Identity",
            "in": "header"
          },
          {
            "required": false,
            "schema": {
              "title": "X-Broker-Api-Request-Identity",
              "type": "string"
            },
            "name": "X-Broker-API-Request-Identity",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProvisioningRequestUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvisioningResponseUpdate"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvisioningResponseUpdate"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ContextBrokerAuth": []
          },
          {
            "ContextBrokerVersion": []
          }
        ]
      }
    },
    "/v2/service_instances/{instance_id}/service_bindings/{binding_id}": {
      "get": {
        "tags": ["Broker"],
        "summary": "Fetch a service instance binding.",
        "operationId": "v2_read_service_binding",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Instance Id",
              "type": "string"
            },
            "name": "instance_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Binding Id",
              "type": "string"
            },
            "name": "binding_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Service Id",
              "type": "string"
            },
            "name": "service_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Plan Id",
              "type": "string"
            },
            "name": "plan_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "X-Broker-Api-Originating-Identity",
              "type": "string"
            },
            "name": "X-Broker-API-Originating-Identity",
            "in": "header"
          },
          {
            "required": false,
            "schema": {
              "title": "X-Broker-Api-Request-Identity",
              "type": "string"
            },
            "name": "X-Broker-API-Request-Identity",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BindingResponseFetch"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ContextBrokerAuth": []
          },
          {
            "ContextBrokerVersion": []
          }
        ]
      },
      "put": {
        "tags": ["Broker"],
        "summary": "Create or rotate on a service instance binding.",
        "operationId": "v2_create_service_binding",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Instance Id",
              "type": "string"
            },
            "name": "instance_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Binding Id",
              "type": "string"
            },
            "name": "binding_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Accepts Incomplete",
              "type": "boolean"
            },
            "name": "accepts_incomplete",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "X-Broker-Api-Originating-Identity",
              "type": "string"
            },
            "name": "X-Broker-API-Originating-Identity",
            "in": "header"
          },
          {
            "required": false,
            "schema": {
              "title": "X-Broker-Api-Request-Identity",
              "type": "string"
            },
            "name": "X-Broker-API-Request-Identity",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BindingRequestCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BindingResponseCreateAsync"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BindingResponseCreate"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ContextBrokerAuth": []
          },
          {
            "ContextBrokerVersion": []
          }
        ]
      },
      "delete": {
        "tags": ["Broker"],
        "summary": "Delete a service instance binding.",
        "operationId": "v2_delete_service_binding",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Instance Id",
              "type": "string"
            },
            "name": "instance_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Binding Id",
              "type": "string"
            },
            "name": "binding_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Service Id",
              "type": "string"
            },
            "name": "service_id",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "Plan Id",
              "type": "string"
            },
            "name": "plan_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Accepts Incomplete",
              "type": "boolean"
            },
            "name": "accepts_incomplete",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "X-Broker-Api-Originating-Identity",
              "type": "string"
            },
            "name": "X-Broker-API-Originating-Identity",
            "in": "header"
          },
          {
            "required": false,
            "schema": {
              "title": "X-Broker-Api-Request-Identity",
              "type": "string"
            },
            "name": "X-Broker-API-Request-Identity",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BindingResponseDelete"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          },
          "410": {
            "description": "Gone",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ContextBrokerAuth": []
          },
          {
            "ContextBrokerVersion": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "About": {
        "title": "About",
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the API",
            "default": "mood-api",
            "example": "mood-api"
          },
          "version": {
            "title": "Version",
            "type": "string",
            "description": "Version of the API",
            "example": "1.2.3"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Description of the API",
            "example": ""
          },
          "instance": {
            "title": "Instance",
            "type": "string",
            "description": "Name of the current instance that answer",
            "example": "api-worker-1"
          }
        },
        "description": "About schema"
      },
      "AuthorizationConfig": {
        "title": "AuthorizationConfig",
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "type": "string"
          },
          "credentials": {
            "title": "Credentials",
            "type": "string"
          }
        }
      },
      "BasicAuthConfig": {
        "title": "BasicAuthConfig",
        "type": "object",
        "properties": {
          "username": {
            "title": "Username",
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "string"
          }
        }
      },
      "BindResource": {
        "title": "BindResource",
        "type": "object",
        "properties": {
          "app_guid": {
            "title": "App Guid",
            "type": "string"
          },
          "route": {
            "title": "Route",
            "type": "string"
          }
        }
      },
      "BindingMetadata": {
        "title": "BindingMetadata",
        "type": "object",
        "properties": {
          "expires_at": {
            "title": "Expires At",
            "type": "string"
          },
          "renew_before": {
            "title": "Renew Before",
            "type": "string"
          }
        },
        "description": "An opaque object of metadata. It is expected that Platforms will treat this\nas a blob. Note that there are conventions in existing Service Brokers and\nPlatforms for fields that aid in the display of catalog data."
      },
      "BindingParameterScrapeConfig": {
        "title": "BindingParameterScrapeConfig",
        "type": "object",
        "properties": {
          "proxy_url": {
            "title": "Proxy Url",
            "type": "string"
          },
          "no_proxy": {
            "title": "No Proxy",
            "type": "string"
          },
          "proxy_connect_header": {
            "title": "Proxy Connect Header",
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "follow_redirects": {
            "title": "Follow Redirects",
            "type": "boolean",
            "example": true
          },
          "enable_http2": {
            "title": "Enable Http2",
            "type": "boolean",
            "example": true
          },
          "basic_auth": {
            "$ref": "#/components/schemas/BasicAuthConfig"
          },
          "authorization": {
            "$ref": "#/components/schemas/AuthorizationConfig"
          },
          "oauth2": {
            "$ref": "#/components/schemas/Oauth2Config"
          },
          "tls_config": {
            "$ref": "#/components/schemas/TlsConfig"
          },
          "job_name": {
            "title": "Job Name",
            "type": "string"
          },
          "scrape_interval": {
            "title": "Scrape Interval",
            "pattern": "^((([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?|0)$",
            "type": "string",
            "example": "1m"
          },
          "scrape_timeout": {
            "title": "Scrape Timeout",
            "pattern": "^((([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?|0)$",
            "type": "string",
            "example": "10s"
          },
          "metrics_path": {
            "title": "Metrics Path",
            "type": "string",
            "example": "/metrics"
          },
          "honor_labels": {
            "title": "Honor Labels",
            "type": "boolean",
            "example": false
          },
          "honor_timestamps": {
            "title": "Honor Timestamps",
            "type": "boolean",
            "example": true
          },
          "scheme": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Scheme"
              }
            ],
            "default": "http",
            "example": "http"
          },
          "params": {
            "title": "Params",
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "static_configs": {
            "title": "Static Configs",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StaticConfig"
            }
          },
          "relabel_configs": {
            "title": "Relabel Configs",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelabelConfig"
            }
          },
          "metric_relabel_configs": {
            "title": "Metric Relabel Configs",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelabelConfig"
            }
          }
        }
      },
      "BindingParameters": {
        "title": "BindingParameters",
        "type": "object",
        "properties": {
          "app_metric_path": {
            "title": "App Metric Path",
            "type": "string",
            "default": "/metrics"
          },
          "scrape_config": {
            "title": "Scrape Config",
            "allOf": [
              {
                "$ref": "#/components/schemas/BindingParameterScrapeConfig"
              }
            ],
            "default": {
              "scheme": "http"
            }
          }
        }
      },
      "BindingRequestCreate": {
        "title": "BindingRequestCreate",
        "type": "object",
        "properties": {
          "service_id": {
            "title": "Service Id",
            "type": "string"
          },
          "plan_id": {
            "title": "Plan Id",
            "type": "string"
          },
          "context": {
            "title": "Context",
            "anyOf": [
              {
                "$ref": "#/components/schemas/CloudFoundryContext"
              },
              {
                "$ref": "#/components/schemas/KubernetesContext"
              },
              {
                "$ref": "#/components/schemas/Context"
              }
            ],
            "default": {}
          },
          "app_guid": {
            "title": "App Guid",
            "type": "string"
          },
          "bind_resource": {
            "$ref": "#/components/schemas/BindResource"
          },
          "parameters": {
            "title": "Parameters",
            "allOf": [
              {
                "$ref": "#/components/schemas/BindingParameters"
              }
            ],
            "default": {
              "app_metric_path": "/metrics",
              "scrape_config": {
                "scheme": "http"
              }
            }
          },
          "predecessor_binding_id": {
            "title": "Predecessor Binding Id",
            "type": "string"
          }
        }
      },
      "BindingResponseCreate": {
        "title": "BindingResponseCreate",
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/BindingMetadata"
          },
          "credentials": {
            "title": "Credentials",
            "type": "object"
          },
          "syslog_drain_url": {
            "title": "Syslog Drain Url",
            "type": "string"
          },
          "route_service_url": {
            "title": "Route Service Url",
            "type": "string"
          },
          "volume_mounts": {
            "title": "Volume Mounts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VolumeMount"
            }
          },
          "endpoints": {
            "title": "Endpoints",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Endpoint"
            }
          }
        }
      },
      "BindingResponseCreateAsync": {
        "title": "BindingResponseCreateAsync",
        "type": "object",
        "properties": {
          "operation": {
            "title": "Operation",
            "type": "string"
          }
        },
        "description": "For asynchronous responses, Service Brokers MAY return an identifier\nrepresenting the operation. The value of this field MUST be provided by the\nPlatform with requests to the Polling Last Operation for Service Bindings\nendpoint in a URL encoded query parameter. If present, MUST be a string\ncontaining no more than 10,000 characters."
      },
      "BindingResponseDelete": {
        "title": "BindingResponseDelete",
        "type": "object",
        "properties": {
          "operation": {
            "title": "Operation",
            "type": "string"
          }
        },
        "description": "For asynchronous responses, Service Brokers MAY return an identifier\nrepresenting the operation. The value of this field MUST be provided by the\nPlatform with requests to the Polling Last Operation for Service Bindings\nendpoint in a URL encoded query parameter. If present, MUST be a string\ncontaining no more than 10,000 characters."
      },
      "BindingResponseFetch": {
        "title": "BindingResponseFetch",
        "required": ["parameters"],
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/BindingMetadata"
          },
          "credentials": {
            "title": "Credentials",
            "type": "object"
          },
          "syslog_drain_url": {
            "title": "Syslog Drain Url",
            "type": "string"
          },
          "route_service_url": {
            "title": "Route Service Url",
            "type": "string"
          },
          "volume_mounts": {
            "title": "Volume Mounts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VolumeMount"
            }
          },
          "endpoints": {
            "title": "Endpoints",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Endpoint"
            }
          },
          "parameters": {
            "$ref": "#/components/schemas/BindingParameters"
          }
        }
      },
      "BrokerError": {
        "title": "BrokerError",
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "instance_usable": {
            "title": "Instance Usable",
            "type": "boolean"
          },
          "update_repeatable": {
            "title": "Update Repeatable",
            "type": "boolean"
          }
        },
        "example": {
          "error": "SomeError",
          "description": "Something went oh no. Oh no no no."
        }
      },
      "Catalog": {
        "title": "Catalog",
        "type": "object",
        "properties": {
          "services": {
            "title": "Services",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceOffering"
            }
          }
        }
      },
      "CloudFoundryContext": {
        "title": "CloudFoundryContext",
        "required": ["organization_guid", "organization_name", "space_guid", "space_name"],
        "type": "object",
        "properties": {
          "organization_guid": {
            "title": "Organization Guid",
            "type": "string"
          },
          "organization_name": {
            "title": "Organization Name",
            "type": "string"
          },
          "organization_annotations": {
            "title": "Organization Annotations",
            "type": "object"
          },
          "space_guid": {
            "title": "Space Guid",
            "type": "string"
          },
          "space_name": {
            "title": "Space Name",
            "type": "string"
          },
          "space_annotations": {
            "title": "Space Annotations",
            "type": "object"
          },
          "instance_name": {
            "title": "Instance Name",
            "type": "string"
          },
          "instance_annotations": {
            "title": "Instance Annotations",
            "type": "object"
          }
        },
        "description": "Contextual data for the Service Instance/Binding. This MAY be used by\nPlatforms to let Service Brokers know when contextual information for a\nService Instance has changed (i.e. instance_name in the Cloud Foundry\nContext Object)."
      },
      "ConfigBind": {
        "title": "ConfigBind",
        "type": "object",
        "properties": {
          "prometheus": {
            "title": "configuration id or name: prometheus",
            "type": "string"
          },
          "rules": {
            "title": "configuration id or name: rules",
            "type": "string"
          },
          "alertmanager": {
            "title": "configuration id or name: alertmanager",
            "type": "string"
          },
          "force": {
            "title": "disregard configuration validation result",
            "type": "boolean",
            "default": false
          }
        },
        "description": "ConfigBind\n\nAttributes:\n    prometheus (str): Prometheus config identifier or name\n    rules (str):Rules config identifier or name\n    alertmanager (str): Alertmanager config identifier or name",
        "example": {
          "prometheus": "id|name",
          "rules": "id|name",
          "alertmanager": "id|name"
        }
      },
      "ConfigCreate": {
        "title": "ConfigCreate",
        "required": ["name", "data"],
        "type": "object",
        "properties": {
          "name": {
            "title": "Configuration name",
            "maxLength": 64,
            "minLength": 3,
            "pattern": "(?!^all$)(^[0-9a-zA-Z][0-9a-zA-Z\\-]+[0-9a-zA-Z]$)",
            "type": "string",
            "example": "my-configuration"
          },
          "description": {
            "title": "Configuration description",
            "maxLength": 512,
            "type": "string",
            "default": "",
            "example": "My comprehensive configuration description"
          },
          "data": {
            "title": "Configuration data",
            "example": {}
          },
          "id": {
            "title": "Configuration identifier",
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "tenant": {
            "title": "SQLalchemy Tenant db model"
          }
        },
        "description": "ConfigCreate\n    id (UUID): Configuration identifier\n    tenant (models/Tenant): SQLalchemy Tenant db model\n\nAttributes:\n    name (str): Configuration name\n    data (Any): Configuration payload",
        "example": {
          "name": "my-configuration",
          "description": "My comprehensive configuration description",
          "data": {}
        }
      },
      "ConfigData": {
        "title": "ConfigData",
        "type": "object",
        "properties": {},
        "description": "ConfigData class\n\nAttributes:\n    n/a: accept everything (parse later)"
      },
      "ConfigDisplay": {
        "title": "ConfigDisplay",
        "required": ["name", "data", "id", "related_instances"],
        "type": "object",
        "properties": {
          "name": {
            "title": "Configuration name",
            "maxLength": 64,
            "minLength": 3,
            "pattern": "(?!^all$)(^[0-9a-zA-Z][0-9a-zA-Z\\-]+[0-9a-zA-Z]$)",
            "type": "string",
            "example": "my-configuration"
          },
          "description": {
            "title": "Configuration description",
            "maxLength": 512,
            "type": "string",
            "default": "",
            "example": "My comprehensive configuration description"
          },
          "data": {
            "title": "Configuration data",
            "example": {}
          },
          "id": {
            "title": "Configuration identifier",
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "related_instances": {
            "title": "List of instances running the configuration",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "example": [
              "00000000-0000-0000-0000-000000000000",
              "11111111-1111-1111-1111-111111111111"
            ]
          },
          "status": {
            "title": "Configuration status",
            "type": "string",
            "example": "created"
          }
        },
        "description": "ConfigDisplay\n\nAttributes:\n    id (UUID): Configuration identifier\n    status (str): Configuration validity status (pending, valid, invalid)\n    tenant_id (str): Tenant id (extra)\n\nInherited attributes:\n    name (str): Configuration name\n    data (dict[str, Any]): Configuration payload"
      },
      "ConfigEnum": {
        "title": "ConfigEnum",
        "enum": ["prometheus", "rules", "alertmanager"],
        "type": "string",
        "description": "An enumeration."
      },
      "ConfigUpdate": {
        "title": "ConfigUpdate",
        "type": "object",
        "properties": {
          "name": {
            "title": "Configuration name",
            "maxLength": 64,
            "minLength": 3,
            "pattern": "(?!^all$)(^[0-9a-zA-Z][0-9a-zA-Z\\-]+[0-9a-zA-Z]$)",
            "type": "string",
            "example": "my-configuration"
          },
          "description": {
            "title": "Configuration description",
            "maxLength": 512,
            "type": "string",
            "example": "My comprehensive configuration description"
          },
          "data": {
            "title": "Configuration data",
            "example": {}
          },
          "status": {
            "title": "Background task status",
            "maxLength": 2048,
            "minLength": 3,
            "type": "string",
            "example": "pending"
          }
        },
        "description": "ConfigUpdate class\n\nAttributes:\n    name (str): Configuration name\n    description (str): Configuration description\n    data (dict[str, Any]): Configuration payload\n    status (str): Configuration validity status (pending, valid, invalid)",
        "example": {
          "name": "my-configuration",
          "description": "My comprehensive configuration description",
          "data": {}
        }
      },
      "Context": {
        "title": "Context",
        "type": "object",
        "properties": {},
        "description": "Contextual data for the Service Instance/Binding. This MAY be used by\nPlatforms to let Service Brokers know when contextual information for a\nService Instance has changed (i.e. instance_name in the Cloud Foundry\nContext Object)."
      },
      "Cost": {
        "title": "Cost",
        "required": ["amount", "unit"],
        "type": "object",
        "properties": {
          "amount": {
            "title": "Amount",
            "type": "object",
            "additionalProperties": {
              "type": "number"
            }
          },
          "unit": {
            "title": "Unit",
            "type": "string"
          }
        }
      },
      "DashboardClient": {
        "title": "DashboardClient",
        "required": ["id", "secret"],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "secret": {
            "title": "Secret",
            "type": "string"
          },
          "redirect_uri": {
            "title": "Redirect Uri",
            "type": "string"
          }
        }
      },
      "Device": {
        "title": "Device",
        "required": ["volume_id"],
        "type": "object",
        "properties": {
          "volume_id": {
            "title": "Volume Id",
            "type": "string"
          },
          "mount_config": {
            "title": "Mount Config",
            "type": "object"
          }
        }
      },
      "DeviceType": {
        "title": "DeviceType",
        "enum": ["shared"],
        "description": "An enumeration."
      },
      "Endpoint": {
        "title": "Endpoint",
        "required": ["host", "ports"],
        "type": "object",
        "properties": {
          "host": {
            "title": "Host",
            "type": "string"
          },
          "ports": {
            "title": "Ports",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "protocol": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Protocol"
              }
            ],
            "default": "tcp"
          }
        }
      },
      "ErrorCode": {
        "title": "ErrorCode",
        "enum": [
          "AsyncRequired",
          "ConcurrencyError",
          "RequiresApp",
          "MaintenanceInfoConflict",
          "BadRequest",
          "Unauthorized",
          "NotFound",
          "Conflict",
          "Gone",
          "InternalServerError",
          "InvalidVersion",
          "ServiceBound"
        ],
        "description": "An enumeration."
      },
      "ErrorMessage": {
        "title": "ErrorMessage",
        "required": ["detail", "correlation_id"],
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "string",
            "example": "Something went oh no. Oh no no no."
          },
          "correlation_id": {
            "title": "Correlation Id",
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          }
        },
        "description": "Error message schema"
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "InputParametersSchema": {
        "title": "InputParametersSchema",
        "type": "object",
        "properties": {
          "parameters": {
            "title": "Parameters",
            "type": "string",
            "format": "json-string"
          }
        }
      },
      "InstanceCreate": {
        "title": "InstanceCreate",
        "required": ["name"],
        "type": "object",
        "properties": {
          "name": {
            "title": "Instance name",
            "maxLength": 30,
            "minLength": 3,
            "pattern": "(?!^all$)(^[0-9a-zA-Z][0-9a-zA-Z\\-]+[0-9a-zA-Z]$)",
            "type": "string",
            "example": "my-instance"
          },
          "id": {
            "title": "Instance identifier",
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "description": {
            "title": "Instance description",
            "type": "string",
            "default": "",
            "example": "This is the description of this instance"
          },
          "visibility": {
            "title": "Instance visibility",
            "allOf": [
              {
                "$ref": "#/components/schemas/VisibilityEnum"
              }
            ],
            "default": "private"
          },
          "tenant": {
            "title": "SQLalchemy Tenant db model"
          }
        },
        "description": "InstanceCreate\n\nAttributes:\n    id (UUID): Instance identifier\n    description (str) : Instance description\n    visibility (enum): Instance visibility\n    tenant (models/Tenant): SQLalchemy Tenant db model\n\nInherited attributes:\n    name (str): Instance name",
        "example": {
          "name": "my-instance",
          "visibility": "private",
          "description": "my-instance-description"
        }
      },
      "InstanceDisplay": {
        "title": "InstanceDisplay",
        "required": [
          "name",
          "id",
          "related_configs",
          "related_service_instances",
          "url",
          "internal_url"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Instance name",
            "maxLength": 30,
            "minLength": 3,
            "pattern": "(?!^all$)(^[0-9a-zA-Z][0-9a-zA-Z\\-]+[0-9a-zA-Z]$)",
            "type": "string",
            "example": "my-instance"
          },
          "id": {
            "title": "Instance identifier",
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "description": {
            "title": "Instance description",
            "type": "string",
            "default": "",
            "example": "This is the description of this instance"
          },
          "related_configs": {
            "title": "List of configurations deployed on the instance",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "example": [
              "00000000-0000-0000-0000-000000000000",
              "11111111-1111-1111-1111-111111111111"
            ]
          },
          "related_service_instances": {
            "title": "List of cloudfoundry service instance linked to the instance",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "example": [
              "00000000-0000-0000-0000-000000000000",
              "11111111-1111-1111-1111-111111111111"
            ]
          },
          "url": {
            "title": "Instance URL",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "https://<tenant-name>---<instance-name>.<instance-type>.<dc>.<mood-suffix>.com",
              "https://<instance-id>.<instance-type>.<dc>.<mood-suffix>.com"
            ]
          },
          "internal_url": {
            "title": "Kubernetes internal URL",
            "type": "string",
            "example": "<service-prefix>-<service-id>.<tenant-namespace>.svc.<cluster>.local:<service-port>"
          }
        },
        "description": "InstanceDisplay\n\nAttributes:\n    id (UUID): Instance identifier\n    description (str): Instance description\n    tenant_id (str): Tenant id (extra)\n\nInherited attributes:\n    name (str): Instance name"
      },
      "InstanceEnum": {
        "title": "InstanceEnum",
        "enum": ["prometheus", "alertmanager", "victoria"],
        "type": "string",
        "description": "An enumeration."
      },
      "InstanceUpdate": {
        "title": "InstanceUpdate",
        "type": "object",
        "properties": {
          "name": {
            "title": "Instance name",
            "maxLength": 30,
            "minLength": 3,
            "pattern": "(?!^all$)(^[0-9a-zA-Z][0-9a-zA-Z\\-]+[0-9a-zA-Z]$)",
            "type": "string",
            "example": "my-instance"
          },
          "description": {
            "title": "Instance description",
            "type": "string",
            "example": "This is the description of an instance"
          },
          "visibility": {
            "title": "Instance visibility",
            "allOf": [
              {
                "$ref": "#/components/schemas/VisibilityEnum"
              }
            ]
          }
        },
        "description": "InstanceUpdate class\n\nAttributes:\n    name (str): Instance name\n    description (str) : Instance description\n    visibility (enum): Instance visibility"
      },
      "KubernetesContext": {
        "title": "KubernetesContext",
        "required": ["clusterid", "namespace"],
        "type": "object",
        "properties": {
          "clusterid": {
            "title": "Clusterid",
            "type": "string"
          },
          "namespace": {
            "title": "Namespace",
            "type": "string"
          },
          "namespace_annotations": {
            "title": "Namespace Annotations",
            "type": "object"
          },
          "instance_name": {
            "title": "Instance Name",
            "type": "string"
          },
          "instance_annotations": {
            "title": "Instance Annotations",
            "type": "object"
          }
        },
        "description": "Contextual data for the Service Instance/Binding. This MAY be used by\nPlatforms to let Service Brokers know when contextual information for a\nService Instance has changed (i.e. instance_name in the Cloud Foundry\nContext Object)."
      },
      "MaintenanceInfo": {
        "title": "MaintenanceInfo",
        "required": ["version"],
        "type": "object",
        "properties": {
          "version": {
            "title": "Version",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          }
        }
      },
      "Message": {
        "title": "Message",
        "type": "object",
        "properties": {
          "message": {
            "title": "Message",
            "type": "string",
            "default": "",
            "example": "Regular response message"
          }
        },
        "description": "Message schema"
      },
      "Mode": {
        "title": "Mode",
        "enum": ["r", "rw"],
        "description": "An enumeration."
      },
      "Oauth2Config": {
        "title": "Oauth2Config",
        "type": "object",
        "properties": {
          "client_id": {
            "title": "Client Id",
            "type": "string"
          },
          "client_secret": {
            "title": "Client Secret",
            "type": "string"
          },
          "scopes": {
            "title": "Scopes",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token_url": {
            "title": "Token Url",
            "type": "string"
          },
          "endpoint_params": {
            "title": "Endpoint Params",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "PlanMetadata": {
        "title": "PlanMetadata",
        "type": "object",
        "properties": {
          "bullets": {
            "title": "Bullets",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "costs": {
            "title": "Costs",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Cost"
            }
          },
          "displayName": {
            "title": "Displayname",
            "type": "string"
          }
        },
        "description": "An opaque object of metadata. It is expected that Platforms will treat this\nas a blob. Note that there are conventions in existing Service Brokers and\nPlatforms for fields that aid in the display of catalog data."
      },
      "PollingBindingResponse": {
        "title": "PollingBindingResponse",
        "required": ["state"],
        "type": "object",
        "properties": {
          "state": {
            "title": "State",
            "enum": ["in progress", "succeeded", "failed"],
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          }
        }
      },
      "PollingInstanceResponse": {
        "title": "PollingInstanceResponse",
        "required": ["state"],
        "type": "object",
        "properties": {
          "state": {
            "title": "State",
            "enum": ["in progress", "succeeded", "failed"],
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "instance_usable": {
            "title": "Instance Usable",
            "type": "boolean"
          },
          "update_repeatable": {
            "title": "Update Repeatable",
            "type": "boolean"
          }
        }
      },
      "Protocol": {
        "title": "Protocol",
        "enum": ["tcp", "udp", "all"],
        "description": "An enumeration."
      },
      "ProvisioningParameters": {
        "title": "ProvisioningParameters",
        "required": ["tenant_target", "scraper_target"],
        "type": "object",
        "properties": {
          "tenant_target": {
            "title": "Tenant Target",
            "type": "string"
          },
          "scraper_target": {
            "title": "Scraper Target",
            "type": "string"
          },
          "grafana_default_dashboards": {
            "title": "Grafana Default Dashboards",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": ["cf_apps_latency", "cf_apps_requests", "cf_apps_system"]
          }
        }
      },
      "ProvisioningPreviousValues": {
        "title": "ProvisioningPreviousValues",
        "type": "object",
        "properties": {
          "service_id": {
            "title": "Service Id",
            "type": "string"
          },
          "plan_id": {
            "title": "Plan Id",
            "type": "string"
          },
          "organization_id": {
            "title": "Organization Id",
            "type": "string"
          },
          "space_id": {
            "title": "Space Id",
            "type": "string"
          },
          "maintenance_info": {
            "$ref": "#/components/schemas/MaintenanceInfo"
          }
        }
      },
      "ProvisioningRequestCreate": {
        "title": "ProvisioningRequestCreate",
        "required": ["service_id", "plan_id", "organization_guid", "space_guid", "parameters"],
        "type": "object",
        "properties": {
          "service_id": {
            "title": "Service Id",
            "type": "string"
          },
          "plan_id": {
            "title": "Plan Id",
            "type": "string"
          },
          "context": {
            "title": "Context",
            "anyOf": [
              {
                "$ref": "#/components/schemas/CloudFoundryContext"
              },
              {
                "$ref": "#/components/schemas/KubernetesContext"
              },
              {
                "$ref": "#/components/schemas/Context"
              }
            ],
            "default": {}
          },
          "organization_guid": {
            "title": "Organization Guid",
            "type": "string"
          },
          "space_guid": {
            "title": "Space Guid",
            "type": "string"
          },
          "parameters": {
            "$ref": "#/components/schemas/ProvisioningParameters"
          },
          "maintenance_info": {
            "$ref": "#/components/schemas/MaintenanceInfo"
          }
        }
      },
      "ProvisioningRequestUpdate": {
        "title": "ProvisioningRequestUpdate",
        "required": ["service_id", "parameters"],
        "type": "object",
        "properties": {
          "service_id": {
            "title": "Service Id",
            "type": "string"
          },
          "plan_id": {
            "title": "Plan Id",
            "type": "string"
          },
          "context": {
            "title": "Context",
            "anyOf": [
              {
                "$ref": "#/components/schemas/CloudFoundryContext"
              },
              {
                "$ref": "#/components/schemas/KubernetesContext"
              },
              {
                "$ref": "#/components/schemas/Context"
              }
            ],
            "default": {}
          },
          "parameters": {
            "$ref": "#/components/schemas/ProvisioningParameters"
          },
          "previous_values": {
            "$ref": "#/components/schemas/ProvisioningPreviousValues"
          },
          "maintenance_info": {
            "$ref": "#/components/schemas/MaintenanceInfo"
          }
        }
      },
      "ProvisioningResponseCreate": {
        "title": "ProvisioningResponseCreate",
        "type": "object",
        "properties": {
          "dashboard_url": {
            "title": "Dashboard Url",
            "type": "string"
          },
          "operation": {
            "title": "Operation",
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/ServiceInstanceMetadata"
          }
        }
      },
      "ProvisioningResponseDelete": {
        "title": "ProvisioningResponseDelete",
        "type": "object",
        "properties": {
          "operation": {
            "title": "Operation",
            "type": "string"
          }
        },
        "description": "For asynchronous responses, Service Brokers MAY return an identifier\nrepresenting the operation. The value of this field MUST be provided by the\nPlatform with requests to the Polling Last Operation for Service Bindings\nendpoint in a URL encoded query parameter. If present, MUST be a string\ncontaining no more than 10,000 characters."
      },
      "ProvisioningResponseFetch": {
        "title": "ProvisioningResponseFetch",
        "required": ["parameters"],
        "type": "object",
        "properties": {
          "service_id": {
            "title": "Service Id",
            "type": "string"
          },
          "plan_id": {
            "title": "Plan Id",
            "type": "string"
          },
          "dashboard_url": {
            "title": "Dashboard Url",
            "type": "string"
          },
          "parameters": {
            "$ref": "#/components/schemas/ProvisioningParameters"
          },
          "maintenance_info": {
            "$ref": "#/components/schemas/MaintenanceInfo"
          },
          "metadata": {
            "$ref": "#/components/schemas/ServiceInstanceMetadata"
          }
        }
      },
      "ProvisioningResponseUpdate": {
        "title": "ProvisioningResponseUpdate",
        "type": "object",
        "properties": {
          "dashboard_url": {
            "title": "Dashboard Url",
            "type": "string"
          },
          "operation": {
            "title": "Operation",
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/ServiceInstanceMetadata"
          }
        }
      },
      "RelabelConfig": {
        "title": "RelabelConfig",
        "type": "object",
        "properties": {
          "source_labels": {
            "title": "Source Labels",
            "type": "array",
            "items": {
              "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$",
              "type": "string"
            }
          },
          "separator": {
            "title": "Separator",
            "type": "string"
          },
          "target_label": {
            "title": "Target Label",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$",
            "type": "string"
          },
          "regex": {
            "title": "Regex",
            "type": "string"
          },
          "modulus": {
            "title": "Modulus",
            "type": "integer"
          },
          "replacement": {
            "title": "Replacement",
            "type": "string"
          },
          "action": {
            "title": "Action",
            "type": "string"
          }
        }
      },
      "Require": {
        "title": "Require",
        "enum": ["syslog_drain", "route_forwarding", "volume_mount"],
        "description": "An enumeration."
      },
      "Schemas": {
        "title": "Schemas",
        "type": "object",
        "properties": {
          "service_instance": {
            "$ref": "#/components/schemas/ServiceInstanceSchema"
          },
          "service_binding": {
            "$ref": "#/components/schemas/ServiceBindingSchema"
          }
        }
      },
      "Scheme": {
        "title": "Scheme",
        "enum": ["http", "https"],
        "type": "string",
        "description": "An enumeration."
      },
      "ServiceBindingSchema": {
        "title": "ServiceBindingSchema",
        "type": "object",
        "properties": {
          "create": {
            "$ref": "#/components/schemas/InputParametersSchema"
          }
        }
      },
      "ServiceInstanceMetadata": {
        "title": "ServiceInstanceMetadata",
        "type": "object",
        "properties": {
          "labels": {
            "title": "Labels",
            "type": "object"
          },
          "attributes": {
            "title": "Attributes",
            "type": "object"
          }
        },
        "description": "An opaque object of metadata. It is expected that Platforms will treat this\nas a blob. Note that there are conventions in existing Service Brokers and\nPlatforms for fields that aid in the display of catalog data."
      },
      "ServiceInstanceSchema": {
        "title": "ServiceInstanceSchema",
        "type": "object",
        "properties": {
          "create": {
            "$ref": "#/components/schemas/InputParametersSchema"
          },
          "update": {
            "$ref": "#/components/schemas/InputParametersSchema"
          }
        }
      },
      "ServiceOffering": {
        "title": "ServiceOffering",
        "required": ["name", "id", "description", "bindable", "plans"],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "requires": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Require"
            }
          },
          "bindable": {
            "title": "Bindable",
            "type": "boolean"
          },
          "instances_retrievable": {
            "title": "Instances Retrievable",
            "type": "boolean"
          },
          "bindings_retrievable": {
            "title": "Bindings Retrievable",
            "type": "boolean"
          },
          "allow_context_updates": {
            "title": "Allow Context Updates",
            "type": "boolean"
          },
          "metadata": {
            "$ref": "#/components/schemas/ServiceOfferingMetadata"
          },
          "dashboard_client": {
            "$ref": "#/components/schemas/DashboardClient"
          },
          "plan_updateable": {
            "title": "Plan Updateable",
            "type": "boolean"
          },
          "plans": {
            "title": "Plans",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServicePlan"
            }
          }
        }
      },
      "ServiceOfferingMetadata": {
        "title": "ServiceOfferingMetadata",
        "type": "object",
        "properties": {
          "displayName": {
            "title": "Displayname",
            "type": "string"
          },
          "imageUrl": {
            "title": "Imageurl",
            "type": "string"
          },
          "longDescription": {
            "title": "Longdescription",
            "type": "string"
          },
          "providerDisplayName": {
            "title": "Providerdisplayname",
            "type": "string"
          },
          "documentationUrl": {
            "title": "Documentationurl",
            "type": "string"
          },
          "supportUrl": {
            "title": "Supporturl",
            "type": "string"
          },
          "shareable": {
            "title": "Shareable",
            "type": "boolean"
          }
        },
        "description": "An opaque object of metadata. It is expected that Platforms will treat this\nas a blob. Note that there are conventions in existing Service Brokers and\nPlatforms for fields that aid in the display of catalog data."
      },
      "ServicePlan": {
        "title": "ServicePlan",
        "required": ["id", "name", "description"],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/PlanMetadata"
          },
          "free": {
            "title": "Free",
            "type": "boolean",
            "default": true
          },
          "bindable": {
            "title": "Bindable",
            "type": "boolean"
          },
          "binding_rotatable": {
            "title": "Binding Rotatable",
            "type": "boolean"
          },
          "plan_updateable": {
            "title": "Plan Updateable",
            "type": "boolean"
          },
          "schemas": {
            "$ref": "#/components/schemas/Schemas"
          },
          "maximum_polling_duration": {
            "title": "Maximum Polling Duration",
            "minimum": 0.0,
            "type": "integer"
          },
          "maintenance_info": {
            "$ref": "#/components/schemas/MaintenanceInfo"
          }
        }
      },
      "StaticConfig": {
        "title": "StaticConfig",
        "type": "object",
        "properties": {
          "targets": {
            "title": "Targets",
            "type": "array",
            "items": {
              "pattern": "^[a-zA-Z0-9_\\.\\-]+(:[0-9]{2,5})?$",
              "type": "string"
            }
          },
          "labels": {
            "title": "Labels",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "patternProperties": {
              "^[a-zA-Z_][a-zA-Z0-9_]*$": {
                "type": "string"
              }
            }
          }
        }
      },
      "TenantCreate": {
        "title": "TenantCreate",
        "required": ["name", "description"],
        "type": "object",
        "properties": {
          "name": {
            "title": "Tenant name",
            "maxLength": 30,
            "minLength": 3,
            "pattern": "(?!^all$)(^[0-9a-zA-Z][0-9a-zA-Z\\-]+[0-9a-zA-Z]$)",
            "type": "string",
            "example": "my-tenant"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "id": {
            "title": "Tenant id",
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "grafana_org_id": {
            "title": "Grafana org identifier",
            "type": "integer",
            "example": 0
          },
          "labels": {
            "title": "Labels",
            "type": "object",
            "additionalProperties": {
              "maxLength": 64,
              "type": "string"
            }
          }
        },
        "example": {
          "name": "my-tenant",
          "description": "My tenant",
          "labels": {
            "com.orange.repository.orangecarto/id": "10"
          }
        }
      },
      "TenantDisplay": {
        "title": "TenantDisplay",
        "required": ["name", "description", "id", "created_at", "updated_at"],
        "type": "object",
        "properties": {
          "name": {
            "title": "Tenant name",
            "maxLength": 30,
            "minLength": 3,
            "pattern": "(?!^all$)(^[0-9a-zA-Z][0-9a-zA-Z\\-]+[0-9a-zA-Z]$)",
            "type": "string",
            "example": "my-tenant"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "labels": {
            "title": "Labels",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "title": "Updated At",
            "type": "string",
            "format": "date-time"
          }
        },
        "example": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "my-tenant",
          "description": "My tenant",
          "labels": {
            "com.orange.repository.orangecarto/id": "9999"
          },
          "created_at": "2022-11-02T14:33:07.123Z",
          "updated_at": "2022-11-04T15:13:07.123Z"
        }
      },
      "TenantLightDisplay": {
        "title": "TenantLightDisplay",
        "required": ["name", "description", "id"],
        "type": "object",
        "properties": {
          "name": {
            "title": "Tenant name",
            "maxLength": 30,
            "minLength": 3,
            "pattern": "(?!^all$)(^[0-9a-zA-Z][0-9a-zA-Z\\-]+[0-9a-zA-Z]$)",
            "type": "string",
            "example": "my-tenant"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          }
        },
        "example": {
          "name": "my-tenant",
          "description": "My tenant"
        }
      },
      "TenantUpdate": {
        "title": "TenantUpdate",
        "type": "object",
        "properties": {
          "name": {
            "title": "Tenant name",
            "maxLength": 30,
            "minLength": 3,
            "pattern": "(?!^all$)(^[0-9a-zA-Z][0-9a-zA-Z\\-]+[0-9a-zA-Z]$)",
            "type": "string",
            "example": "my-tenant"
          },
          "labels": {
            "title": "Labels",
            "type": "object",
            "additionalProperties": {
              "maxLength": 64,
              "type": "string"
            }
          },
          "description": {
            "title": "Description",
            "type": "string"
          }
        },
        "example": {
          "name": "My new tenant name",
          "description": "My better tenant",
          "labels": {
            "mylabel": "new_value"
          }
        }
      },
      "TlsConfig": {
        "title": "TlsConfig",
        "type": "object",
        "properties": {
          "insecure_skip_verify": {
            "title": "Insecure Skip Verify",
            "type": "boolean",
            "example": false
          },
          "server_name": {
            "title": "Server Name",
            "type": "string"
          },
          "min_version": {
            "title": "Min Version",
            "enum": ["TLS10", "TLS11", "TLS12", "TLS13"],
            "type": "string"
          },
          "max_version": {
            "title": "Max Version",
            "enum": ["TLS10", "TLS11", "TLS12", "TLS13"],
            "type": "string"
          }
        }
      },
      "UserCreateBatch": {
        "title": "UserCreateBatch",
        "type": "object",
        "properties": {
          "admins": {
            "title": "List of admin users",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "example": ["abcd1234", "efgh9876"]
          },
          "members": {
            "title": "List of member users",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "example": ["ijkl4321", "dcba4242"]
          }
        },
        "description": "UserCreateBatch class\n\nAttributes:\n    admins (list[str]): List of admin users\n    members (list[str]): List of member users"
      },
      "UserDisplayBatch": {
        "title": "UserDisplayBatch",
        "type": "object",
        "properties": {
          "admins": {
            "title": "List of admin users",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "example": ["abcd1234", "efgh9876"]
          },
          "members": {
            "title": "List of member users",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "example": ["ijkl4321", "dcba4242"]
          },
          "errors": {
            "title": "List of users errors",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "default": {},
            "example": {
              "mnop5678": "something bad happened"
            }
          }
        },
        "description": "UserDisplayBatch class\nAttributes:\n    admins (list[str]): List of admin users\n    members (list[str]): List of member users"
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": ["loc", "msg", "type"],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      },
      "VisibilityEnum": {
        "title": "VisibilityEnum",
        "enum": ["private", "internal"],
        "type": "string",
        "description": "An enumeration."
      },
      "VolumeMount": {
        "title": "VolumeMount",
        "required": ["driver", "container_dir", "mode", "device_type", "device"],
        "type": "object",
        "properties": {
          "driver": {
            "title": "Driver",
            "type": "string"
          },
          "container_dir": {
            "title": "Container Dir",
            "type": "string"
          },
          "mode": {
            "$ref": "#/components/schemas/Mode"
          },
          "device_type": {
            "$ref": "#/components/schemas/DeviceType"
          },
          "device": {
            "$ref": "#/components/schemas/Device"
          }
        }
      }
    },
    "securitySchemes": {
      "ContextUser": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Auth-Request-Preferred-Username"
      },
      "ContextTenant": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Mood-Tenant"
      },
      "ContextBrokerAuth": {
        "type": "http",
        "scheme": "basic"
      },
      "ContextBrokerVersion": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Broker-API-Version"
      }
    }
  }
}
