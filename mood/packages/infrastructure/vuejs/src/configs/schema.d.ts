/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/v1/tenants": {
    /** List tenants */
    get: operations["v1_list_tenants"];
    /** Create a new tenant */
    post: operations["v1_create_tenant"];
  };
  "/v1/tenants/{target}": {
    /** Read a tenant by id or name */
    get: operations["v1_read_tenant"];
    /** Update a tenant by id or name */
    put: operations["v1_update_tenant"];
    /** Delete a tenant by id or name */
    delete: operations["v1_delete_tenant"];
  };
  "/v1/acls": {
    /** Get all users */
    get: operations["v1_list_users"];
    /** Create a membership relation for a user (admins, members) */
    post: operations["v1_create_users"];
    /** Remove several users membership relation */
    delete: operations["v1_delete_users"];
  };
  "/v1/acls/{user}": {
    /** Get user relations */
    get: operations["v1_read_user"];
    /** Remove user's membership relation */
    delete: operations["v1_delete_user"];
  };
  "/v1/instances/{instance}": {
    /** Get all instances */
    get: operations["v1_list_instances"];
    /** Create prometheus, alertmanager or victoriametrics instance */
    post: operations["v1_create_instance"];
  };
  "/v1/instances/{instance}/{target}/config": {
    /** Apply given configuration to prometheus or alertmanager instance */
    post: operations["v1_bind_instance_config"];
  };
  "/v1/instances/{instance}/{target}": {
    /** Retrieve instance info from given filter (id or name) */
    get: operations["v1_read_instance"];
    /** Update instance info from given filter (id or name) */
    put: operations["v1_update_instance"];
    /** Remove instance from given filter (id or name) */
    delete: operations["v1_delete_instance"];
  };
  "/v1/configs/{config}": {
    /** Get all configurations */
    get: operations["v1_list_configs"];
    /** Create prometheus or alertmanager configuration */
    post: operations["v1_create_config"];
  };
  "/v1/configs/{config}/{target}": {
    /** Retrieve configuration info from given filter (id or name) */
    get: operations["v1_read_config"];
    /** Update configuration info from given filter (id or name) */
    put: operations["v1_update_config"];
    /** Remove configuration from given filter (id or name) */
    delete: operations["v1_delete_config"];
  };
  "/v1/configs/{config}/{target}/status": {
    /** Retrieve configuration status from given filter (id or name) */
    get: operations["v1_read_config_status"];
  };
  "/v1/configs/{config}/{target}/data": {
    /** Retrieve configuration data from given filter (id or name) */
    get: operations["v1_read_config_data"];
    /** Update configuration data from given filter (id or name) */
    put: operations["v1_update_config_data"];
  };
  "/v1/-/healthy": {
    /** API health check */
    get: operations["v1_healthy"];
  };
  "/v1/-/ready": {
    /** API ready check */
    get: operations["v1_ready"];
  };
  "/v1/-/about": {
    /** Get information about the API */
    get: operations["v1_about"];
  };
  "/v2/catalog": {
    /** Retrieve broker catalog of services and plans */
    get: operations["v2_read_catalog"];
  };
  "/v2/service_instances/{instance_id}/last_operation": {
    /** Get the last requested operation state for service instance. */
    get: operations["v2_read_instance_last_operation"];
  };
  "/v2/service_instances/{instance_id}/service_bindings/{binding_id}/last_operation": {
    /** Get the last requested operation state for service binding. */
    get: operations["v2_read_binding_last_operation"];
  };
  "/v2/service_instances/{instance_id}": {
    /** Fetch a service instance. */
    get: operations["v2_read_service_instance"];
    /** Provision a service instance. */
    put: operations["v2_create_service_instance"];
    /** Delete a service instance. */
    delete: operations["v2_delete_service_instance"];
    /** Update a service instance. */
    patch: operations["v2_update_service_instance"];
  };
  "/v2/service_instances/{instance_id}/service_bindings/{binding_id}": {
    /** Fetch a service instance binding. */
    get: operations["v2_read_service_binding"];
    /** Create or rotate on a service instance binding. */
    put: operations["v2_create_service_binding"];
    /** Delete a service instance binding. */
    delete: operations["v2_delete_service_binding"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * About
     * @description About schema
     */
    About: {
      /**
       * Name
       * @description Name of the API
       * @default mood-api
       * @example mood-api
       */
      name?: string;
      /**
       * Version
       * @description Version of the API
       * @example 1.2.3
       */
      version?: string;
      /**
       * Description
       * @description Description of the API
       * @example
       */
      description?: string;
      /**
       * Instance
       * @description Name of the current instance that answer
       * @example api-worker-1
       */
      instance?: string;
    };
    /** AuthorizationConfig */
    AuthorizationConfig: {
      /** Type */
      type?: string;
      /** Credentials */
      credentials?: string;
    };
    /** BasicAuthConfig */
    BasicAuthConfig: {
      /** Username */
      username?: string;
      /** Password */
      password?: string;
    };
    /** BindResource */
    BindResource: {
      /** App Guid */
      app_guid?: string;
      /** Route */
      route?: string;
    };
    /**
     * BindingMetadata
     * @description An opaque object of metadata. It is expected that Platforms will treat this
     * as a blob. Note that there are conventions in existing Service Brokers and
     * Platforms for fields that aid in the display of catalog data.
     */
    BindingMetadata: {
      /** Expires At */
      expires_at?: string;
      /** Renew Before */
      renew_before?: string;
    };
    /** BindingParameterScrapeConfig */
    BindingParameterScrapeConfig: {
      /** Proxy Url */
      proxy_url?: string;
      /** No Proxy */
      no_proxy?: string;
      /** Proxy Connect Header */
      proxy_connect_header?: {
        [key: string]: string[];
      };
      /**
       * Follow Redirects
       * @example true
       */
      follow_redirects?: boolean;
      /**
       * Enable Http2
       * @example true
       */
      enable_http2?: boolean;
      basic_auth?: components["schemas"]["BasicAuthConfig"];
      authorization?: components["schemas"]["AuthorizationConfig"];
      oauth2?: components["schemas"]["Oauth2Config"];
      tls_config?: components["schemas"]["TlsConfig"];
      /** Job Name */
      job_name?: string;
      /**
       * Scrape Interval
       * @example 1m
       */
      scrape_interval?: string;
      /**
       * Scrape Timeout
       * @example 10s
       */
      scrape_timeout?: string;
      /**
       * Metrics Path
       * @example /metrics
       */
      metrics_path?: string;
      /**
       * Honor Labels
       * @example false
       */
      honor_labels?: boolean;
      /**
       * Honor Timestamps
       * @example true
       */
      honor_timestamps?: boolean;
      /**
       * @default http
       * @example http
       */
      scheme?: components["schemas"]["Scheme"];
      /** Params */
      params?: {
        [key: string]: string[];
      };
      /** Static Configs */
      static_configs?: components["schemas"]["StaticConfig"][];
      /** Relabel Configs */
      relabel_configs?: components["schemas"]["RelabelConfig"][];
      /** Metric Relabel Configs */
      metric_relabel_configs?: components["schemas"]["RelabelConfig"][];
    };
    /** BindingParameters */
    BindingParameters: {
      /**
       * App Metric Path
       * @default /metrics
       */
      app_metric_path?: string;
      /**
       * Scrape Config
       * @default {
       *   "scheme": "http"
       * }
       */
      scrape_config?: components["schemas"]["BindingParameterScrapeConfig"];
    };
    /** BindingRequestCreate */
    BindingRequestCreate: {
      /** Service Id */
      service_id?: string;
      /** Plan Id */
      plan_id?: string;
      /**
       * Context
       * @default {}
       */
      context?: components["schemas"]["CloudFoundryContext"] | components["schemas"]["KubernetesContext"] | components["schemas"]["Context"];
      /** App Guid */
      app_guid?: string;
      bind_resource?: components["schemas"]["BindResource"];
      /**
       * Parameters
       * @default {
       *   "app_metric_path": "/metrics",
       *   "scrape_config": {
       *     "scheme": "http"
       *   }
       * }
       */
      parameters?: components["schemas"]["BindingParameters"];
      /** Predecessor Binding Id */
      predecessor_binding_id?: string;
    };
    /** BindingResponseCreate */
    BindingResponseCreate: {
      metadata?: components["schemas"]["BindingMetadata"];
      /** Credentials */
      credentials?: Record<string, never>;
      /** Syslog Drain Url */
      syslog_drain_url?: string;
      /** Route Service Url */
      route_service_url?: string;
      /** Volume Mounts */
      volume_mounts?: components["schemas"]["VolumeMount"][];
      /** Endpoints */
      endpoints?: components["schemas"]["Endpoint"][];
    };
    /**
     * BindingResponseCreateAsync
     * @description For asynchronous responses, Service Brokers MAY return an identifier
     * representing the operation. The value of this field MUST be provided by the
     * Platform with requests to the Polling Last Operation for Service Bindings
     * endpoint in a URL encoded query parameter. If present, MUST be a string
     * containing no more than 10,000 characters.
     */
    BindingResponseCreateAsync: {
      /** Operation */
      operation?: string;
    };
    /**
     * BindingResponseDelete
     * @description For asynchronous responses, Service Brokers MAY return an identifier
     * representing the operation. The value of this field MUST be provided by the
     * Platform with requests to the Polling Last Operation for Service Bindings
     * endpoint in a URL encoded query parameter. If present, MUST be a string
     * containing no more than 10,000 characters.
     */
    BindingResponseDelete: {
      /** Operation */
      operation?: string;
    };
    /** BindingResponseFetch */
    BindingResponseFetch: {
      metadata?: components["schemas"]["BindingMetadata"];
      /** Credentials */
      credentials?: Record<string, never>;
      /** Syslog Drain Url */
      syslog_drain_url?: string;
      /** Route Service Url */
      route_service_url?: string;
      /** Volume Mounts */
      volume_mounts?: components["schemas"]["VolumeMount"][];
      /** Endpoints */
      endpoints?: components["schemas"]["Endpoint"][];
      parameters: components["schemas"]["BindingParameters"];
    };
    /**
     * BrokerError
     * @example {
     *   "error": "SomeError",
     *   "description": "Something went oh no. Oh no no no."
     * }
     */
    BrokerError: {
      error?: components["schemas"]["ErrorCode"];
      /** Description */
      description?: string;
      /** Instance Usable */
      instance_usable?: boolean;
      /** Update Repeatable */
      update_repeatable?: boolean;
    };
    /** Catalog */
    Catalog: {
      /** Services */
      services?: components["schemas"]["ServiceOffering"][];
    };
    /**
     * CloudFoundryContext
     * @description Contextual data for the Service Instance/Binding. This MAY be used by
     * Platforms to let Service Brokers know when contextual information for a
     * Service Instance has changed (i.e. instance_name in the Cloud Foundry
     * Context Object).
     */
    CloudFoundryContext: {
      /** Organization Guid */
      organization_guid: string;
      /** Organization Name */
      organization_name: string;
      /** Organization Annotations */
      organization_annotations?: Record<string, never>;
      /** Space Guid */
      space_guid: string;
      /** Space Name */
      space_name: string;
      /** Space Annotations */
      space_annotations?: Record<string, never>;
      /** Instance Name */
      instance_name?: string;
      /** Instance Annotations */
      instance_annotations?: Record<string, never>;
    };
    /**
     * ConfigBind
     * @description ConfigBind
     *
     * Attributes:
     *     prometheus (str): Prometheus config identifier or name
     *     rules (str):Rules config identifier or name
     *     alertmanager (str): Alertmanager config identifier or name
     * @example {
     *   "prometheus": "id|name",
     *   "rules": "id|name",
     *   "alertmanager": "id|name"
     * }
     */
    ConfigBind: {
      /** configuration id or name: prometheus */
      prometheus?: string;
      /** configuration id or name: rules */
      rules?: string;
      /** configuration id or name: alertmanager */
      alertmanager?: string;
      /**
       * disregard configuration validation result
       * @default false
       */
      force?: boolean;
    };
    /**
     * ConfigCreate
     * @description ConfigCreate
     *     id (UUID): Configuration identifier
     *     tenant (models/Tenant): SQLalchemy Tenant db model
     *
     * Attributes:
     *     name (str): Configuration name
     *     data (Any): Configuration payload
     * @example {
     *   "name": "my-configuration",
     *   "description": "My comprehensive configuration description",
     *   "data": {}
     * }
     */
    ConfigCreate: {
      /**
       * Configuration name
       * @example my-configuration
       */
      name: string;
      /**
       * Configuration description
       * @default
       * @example My comprehensive configuration description
       */
      description?: string;
      /**
       * Configuration data
       * @example {}
       */
      data: unknown;
      /**
       * Configuration identifier
       * Format: uuid
       * @example 00000000-0000-0000-0000-000000000000
       */
      id?: string;
      /** SQLalchemy Tenant db model */
      tenant?: unknown;
    };
    /**
     * ConfigData
     * @description ConfigData class
     *
     * Attributes:
     *     n/a: accept everything (parse later)
     */
    ConfigData: Record<string, never>;
    /**
     * ConfigDisplay
     * @description ConfigDisplay
     *
     * Attributes:
     *     id (UUID): Configuration identifier
     *     status (str): Configuration validity status (pending, valid, invalid)
     *     tenant_id (str): Tenant id (extra)
     *
     * Inherited attributes:
     *     name (str): Configuration name
     *     data (dict[str, Any]): Configuration payload
     */
    ConfigDisplay: {
      /**
       * Configuration name
       * @example my-configuration
       */
      name: string;
      /**
       * Configuration description
       * @default
       * @example My comprehensive configuration description
       */
      description?: string;
      /**
       * Configuration data
       * @example {}
       */
      data: unknown;
      /**
       * Configuration identifier
       * Format: uuid
       * @example 00000000-0000-0000-0000-000000000000
       */
      id: string;
      /**
       * List of instances running the configuration
       * @example [
       *   "00000000-0000-0000-0000-000000000000",
       *   "11111111-1111-1111-1111-111111111111"
       * ]
       */
      related_instances: string[];
      /**
       * Configuration status
       * @example created
       */
      status?: string;
    };
    /**
     * ConfigEnum
     * @description An enumeration.
     * @enum {string}
     */
    ConfigEnum: "prometheus" | "rules" | "alertmanager";
    /**
     * ConfigUpdate
     * @description ConfigUpdate class
     *
     * Attributes:
     *     name (str): Configuration name
     *     description (str): Configuration description
     *     data (dict[str, Any]): Configuration payload
     *     status (str): Configuration validity status (pending, valid, invalid)
     * @example {
     *   "name": "my-configuration",
     *   "description": "My comprehensive configuration description",
     *   "data": {}
     * }
     */
    ConfigUpdate: {
      /**
       * Configuration name
       * @example my-configuration
       */
      name?: string;
      /**
       * Configuration description
       * @example My comprehensive configuration description
       */
      description?: string;
      /**
       * Configuration data
       * @example {}
       */
      data?: unknown;
      /**
       * Background task status
       * @example pending
       */
      status?: string;
    };
    /**
     * Context
     * @description Contextual data for the Service Instance/Binding. This MAY be used by
     * Platforms to let Service Brokers know when contextual information for a
     * Service Instance has changed (i.e. instance_name in the Cloud Foundry
     * Context Object).
     */
    Context: Record<string, never>;
    /** Cost */
    Cost: {
      /** Amount */
      amount: {
        [key: string]: number;
      };
      /** Unit */
      unit: string;
    };
    /** DashboardClient */
    DashboardClient: {
      /** Id */
      id: string;
      /** Secret */
      secret: string;
      /** Redirect Uri */
      redirect_uri?: string;
    };
    /** Device */
    Device: {
      /** Volume Id */
      volume_id: string;
      /** Mount Config */
      mount_config?: Record<string, never>;
    };
    /**
     * DeviceType
     * @description An enumeration.
     * @enum {unknown}
     */
    DeviceType: "shared";
    /** Endpoint */
    Endpoint: {
      /** Host */
      host: string;
      /** Ports */
      ports: string[];
      /** @default tcp */
      protocol?: components["schemas"]["Protocol"];
    };
    /**
     * ErrorCode
     * @description An enumeration.
     * @enum {unknown}
     */
    ErrorCode: "AsyncRequired" | "ConcurrencyError" | "RequiresApp" | "MaintenanceInfoConflict" | "BadRequest" | "Unauthorized" | "NotFound" | "Conflict" | "Gone" | "InternalServerError" | "InvalidVersion" | "ServiceBound";
    /**
     * ErrorMessage
     * @description Error message schema
     */
    ErrorMessage: {
      /**
       * Detail
       * @example Something went oh no. Oh no no no.
       */
      detail: string;
      /**
       * Correlation Id
       * Format: uuid
       * @example 00000000-0000-0000-0000-000000000000
       */
      correlation_id: string;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** InputParametersSchema */
    InputParametersSchema: {
      /**
       * Parameters
       * Format: json-string
       */
      parameters?: string;
    };
    /**
     * InstanceCreate
     * @description InstanceCreate
     *
     * Attributes:
     *     id (UUID): Instance identifier
     *     description (str) : Instance description
     *     visibility (enum): Instance visibility
     *     tenant (models/Tenant): SQLalchemy Tenant db model
     *
     * Inherited attributes:
     *     name (str): Instance name
     * @example {
     *   "name": "my-instance",
     *   "visibility": "private",
     *   "description": "my-instance-description"
     * }
     */
    InstanceCreate: {
      /**
       * Instance name
       * @example my-instance
       */
      name: string;
      /**
       * Instance identifier
       * Format: uuid
       * @example 00000000-0000-0000-0000-000000000000
       */
      id?: string;
      /**
       * Instance description
       * @default
       * @example This is the description of this instance
       */
      description?: string;
      /**
       * Instance visibility
       * @default private
       */
      visibility?: components["schemas"]["VisibilityEnum"];
      /** SQLalchemy Tenant db model */
      tenant?: unknown;
    };
    /**
     * InstanceDisplay
     * @description InstanceDisplay
     *
     * Attributes:
     *     id (UUID): Instance identifier
     *     description (str): Instance description
     *     tenant_id (str): Tenant id (extra)
     *
     * Inherited attributes:
     *     name (str): Instance name
     */
    InstanceDisplay: {
      /**
       * Instance name
       * @example my-instance
       */
      name: string;
      /**
       * Instance identifier
       * Format: uuid
       * @example 00000000-0000-0000-0000-000000000000
       */
      id: string;
      /**
       * Instance description
       * @default
       * @example This is the description of this instance
       */
      description?: string;
      /**
       * List of configurations deployed on the instance
       * @example [
       *   "00000000-0000-0000-0000-000000000000",
       *   "11111111-1111-1111-1111-111111111111"
       * ]
       */
      related_configs: string[];
      /**
       * List of cloudfoundry service instance linked to the instance
       * @example [
       *   "00000000-0000-0000-0000-000000000000",
       *   "11111111-1111-1111-1111-111111111111"
       * ]
       */
      related_service_instances: string[];
      /**
       * Instance URL
       * @example [
       *   "https://<tenant-name>---<instance-name>.<instance-type>.<dc>.<mood-suffix>.com",
       *   "https://<instance-id>.<instance-type>.<dc>.<mood-suffix>.com"
       * ]
       */
      url: string[];
      /**
       * Kubernetes internal URL
       * @example <service-prefix>-<service-id>.<tenant-namespace>.svc.<cluster>.local:<service-port>
       */
      internal_url: string;
    };
    /**
     * InstanceEnum
     * @description An enumeration.
     * @enum {string}
     */
    InstanceEnum: "prometheus" | "alertmanager" | "victoria";
    /**
     * InstanceUpdate
     * @description InstanceUpdate class
     *
     * Attributes:
     *     name (str): Instance name
     *     description (str) : Instance description
     *     visibility (enum): Instance visibility
     */
    InstanceUpdate: {
      /**
       * Instance name
       * @example my-instance
       */
      name?: string;
      /**
       * Instance description
       * @example This is the description of an instance
       */
      description?: string;
      /** Instance visibility */
      visibility?: components["schemas"]["VisibilityEnum"];
    };
    /**
     * KubernetesContext
     * @description Contextual data for the Service Instance/Binding. This MAY be used by
     * Platforms to let Service Brokers know when contextual information for a
     * Service Instance has changed (i.e. instance_name in the Cloud Foundry
     * Context Object).
     */
    KubernetesContext: {
      /** Clusterid */
      clusterid: string;
      /** Namespace */
      namespace: string;
      /** Namespace Annotations */
      namespace_annotations?: Record<string, never>;
      /** Instance Name */
      instance_name?: string;
      /** Instance Annotations */
      instance_annotations?: Record<string, never>;
    };
    /** MaintenanceInfo */
    MaintenanceInfo: {
      /** Version */
      version: string;
      /** Description */
      description?: string;
    };
    /**
     * Message
     * @description Message schema
     */
    Message: {
      /**
       * Message
       * @default
       * @example Regular response message
       */
      message?: string;
    };
    /**
     * Mode
     * @description An enumeration.
     * @enum {unknown}
     */
    Mode: "r" | "rw";
    /** Oauth2Config */
    Oauth2Config: {
      /** Client Id */
      client_id?: string;
      /** Client Secret */
      client_secret?: string;
      /** Scopes */
      scopes?: string[];
      /** Token Url */
      token_url?: string;
      /** Endpoint Params */
      endpoint_params?: {
        [key: string]: string;
      };
    };
    /**
     * PlanMetadata
     * @description An opaque object of metadata. It is expected that Platforms will treat this
     * as a blob. Note that there are conventions in existing Service Brokers and
     * Platforms for fields that aid in the display of catalog data.
     */
    PlanMetadata: {
      /** Bullets */
      bullets?: string[];
      /** Costs */
      costs?: components["schemas"]["Cost"][];
      /** Displayname */
      displayName?: string;
    };
    /** PollingBindingResponse */
    PollingBindingResponse: {
      /**
       * State
       * @enum {string}
       */
      state: "in progress" | "succeeded" | "failed";
      /** Description */
      description?: string;
    };
    /** PollingInstanceResponse */
    PollingInstanceResponse: {
      /**
       * State
       * @enum {string}
       */
      state: "in progress" | "succeeded" | "failed";
      /** Description */
      description?: string;
      /** Instance Usable */
      instance_usable?: boolean;
      /** Update Repeatable */
      update_repeatable?: boolean;
    };
    /**
     * Protocol
     * @description An enumeration.
     * @enum {unknown}
     */
    Protocol: "tcp" | "udp" | "all";
    /** ProvisioningParameters */
    ProvisioningParameters: {
      /** Tenant Target */
      tenant_target: string;
      /** Scraper Target */
      scraper_target: string;
      /**
       * Grafana Default Dashboards
       * @default [
       *   "cf_apps_latency",
       *   "cf_apps_requests",
       *   "cf_apps_system"
       * ]
       */
      grafana_default_dashboards?: string[];
    };
    /** ProvisioningPreviousValues */
    ProvisioningPreviousValues: {
      /** Service Id */
      service_id?: string;
      /** Plan Id */
      plan_id?: string;
      /** Organization Id */
      organization_id?: string;
      /** Space Id */
      space_id?: string;
      maintenance_info?: components["schemas"]["MaintenanceInfo"];
    };
    /** ProvisioningRequestCreate */
    ProvisioningRequestCreate: {
      /** Service Id */
      service_id: string;
      /** Plan Id */
      plan_id: string;
      /**
       * Context
       * @default {}
       */
      context?: components["schemas"]["CloudFoundryContext"] | components["schemas"]["KubernetesContext"] | components["schemas"]["Context"];
      /** Organization Guid */
      organization_guid: string;
      /** Space Guid */
      space_guid: string;
      parameters: components["schemas"]["ProvisioningParameters"];
      maintenance_info?: components["schemas"]["MaintenanceInfo"];
    };
    /** ProvisioningRequestUpdate */
    ProvisioningRequestUpdate: {
      /** Service Id */
      service_id: string;
      /** Plan Id */
      plan_id?: string;
      /**
       * Context
       * @default {}
       */
      context?: components["schemas"]["CloudFoundryContext"] | components["schemas"]["KubernetesContext"] | components["schemas"]["Context"];
      parameters: components["schemas"]["ProvisioningParameters"];
      previous_values?: components["schemas"]["ProvisioningPreviousValues"];
      maintenance_info?: components["schemas"]["MaintenanceInfo"];
    };
    /** ProvisioningResponseCreate */
    ProvisioningResponseCreate: {
      /** Dashboard Url */
      dashboard_url?: string;
      /** Operation */
      operation?: string;
      metadata?: components["schemas"]["ServiceInstanceMetadata"];
    };
    /**
     * ProvisioningResponseDelete
     * @description For asynchronous responses, Service Brokers MAY return an identifier
     * representing the operation. The value of this field MUST be provided by the
     * Platform with requests to the Polling Last Operation for Service Bindings
     * endpoint in a URL encoded query parameter. If present, MUST be a string
     * containing no more than 10,000 characters.
     */
    ProvisioningResponseDelete: {
      /** Operation */
      operation?: string;
    };
    /** ProvisioningResponseFetch */
    ProvisioningResponseFetch: {
      /** Service Id */
      service_id?: string;
      /** Plan Id */
      plan_id?: string;
      /** Dashboard Url */
      dashboard_url?: string;
      parameters: components["schemas"]["ProvisioningParameters"];
      maintenance_info?: components["schemas"]["MaintenanceInfo"];
      metadata?: components["schemas"]["ServiceInstanceMetadata"];
    };
    /** ProvisioningResponseUpdate */
    ProvisioningResponseUpdate: {
      /** Dashboard Url */
      dashboard_url?: string;
      /** Operation */
      operation?: string;
      metadata?: components["schemas"]["ServiceInstanceMetadata"];
    };
    /** RelabelConfig */
    RelabelConfig: {
      /** Source Labels */
      source_labels?: string[];
      /** Separator */
      separator?: string;
      /** Target Label */
      target_label?: string;
      /** Regex */
      regex?: string;
      /** Modulus */
      modulus?: number;
      /** Replacement */
      replacement?: string;
      /** Action */
      action?: string;
    };
    /**
     * Require
     * @description An enumeration.
     * @enum {unknown}
     */
    Require: "syslog_drain" | "route_forwarding" | "volume_mount";
    /** Schemas */
    Schemas: {
      service_instance?: components["schemas"]["ServiceInstanceSchema"];
      service_binding?: components["schemas"]["ServiceBindingSchema"];
    };
    /**
     * Scheme
     * @description An enumeration.
     * @enum {string}
     */
    Scheme: "http" | "https";
    /** ServiceBindingSchema */
    ServiceBindingSchema: {
      create?: components["schemas"]["InputParametersSchema"];
    };
    /**
     * ServiceInstanceMetadata
     * @description An opaque object of metadata. It is expected that Platforms will treat this
     * as a blob. Note that there are conventions in existing Service Brokers and
     * Platforms for fields that aid in the display of catalog data.
     */
    ServiceInstanceMetadata: {
      /** Labels */
      labels?: Record<string, never>;
      /** Attributes */
      attributes?: Record<string, never>;
    };
    /** ServiceInstanceSchema */
    ServiceInstanceSchema: {
      create?: components["schemas"]["InputParametersSchema"];
      update?: components["schemas"]["InputParametersSchema"];
    };
    /** ServiceOffering */
    ServiceOffering: {
      /** Name */
      name: string;
      /** Id */
      id: string;
      /** Description */
      description: string;
      /** Tags */
      tags?: string[];
      requires?: components["schemas"]["Require"][];
      /** Bindable */
      bindable: boolean;
      /** Instances Retrievable */
      instances_retrievable?: boolean;
      /** Bindings Retrievable */
      bindings_retrievable?: boolean;
      /** Allow Context Updates */
      allow_context_updates?: boolean;
      metadata?: components["schemas"]["ServiceOfferingMetadata"];
      dashboard_client?: components["schemas"]["DashboardClient"];
      /** Plan Updateable */
      plan_updateable?: boolean;
      /** Plans */
      plans: components["schemas"]["ServicePlan"][];
    };
    /**
     * ServiceOfferingMetadata
     * @description An opaque object of metadata. It is expected that Platforms will treat this
     * as a blob. Note that there are conventions in existing Service Brokers and
     * Platforms for fields that aid in the display of catalog data.
     */
    ServiceOfferingMetadata: {
      /** Displayname */
      displayName?: string;
      /** Imageurl */
      imageUrl?: string;
      /** Longdescription */
      longDescription?: string;
      /** Providerdisplayname */
      providerDisplayName?: string;
      /** Documentationurl */
      documentationUrl?: string;
      /** Supporturl */
      supportUrl?: string;
      /** Shareable */
      shareable?: boolean;
    };
    /** ServicePlan */
    ServicePlan: {
      /** Id */
      id: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      metadata?: components["schemas"]["PlanMetadata"];
      /**
       * Free
       * @default true
       */
      free?: boolean;
      /** Bindable */
      bindable?: boolean;
      /** Binding Rotatable */
      binding_rotatable?: boolean;
      /** Plan Updateable */
      plan_updateable?: boolean;
      schemas?: components["schemas"]["Schemas"];
      /** Maximum Polling Duration */
      maximum_polling_duration?: number;
      maintenance_info?: components["schemas"]["MaintenanceInfo"];
    };
    /** StaticConfig */
    StaticConfig: {
      /** Targets */
      targets?: string[];
      /** Labels */
      labels?: {
        [key: string]: string;
      };
    };
    /**
     * TenantCreate
     * @example {
     *   "name": "my-tenant",
     *   "description": "My tenant",
     *   "labels": {
     *     "com.orange.repository.orangecarto/id": "10"
     *   }
     * }
     */
    TenantCreate: {
      /**
       * Tenant name
       * @example my-tenant
       */
      name: string;
      /** Description */
      description: string;
      /**
       * Tenant id
       * Format: uuid
       * @example 00000000-0000-0000-0000-000000000000
       */
      id?: string;
      /**
       * Grafana org identifier
       * @example 0
       */
      grafana_org_id?: number;
      /** Labels */
      labels?: {
        [key: string]: string;
      };
    };
    /**
     * TenantDisplay
     * @example {
     *   "id": "00000000-0000-0000-0000-000000000000",
     *   "name": "my-tenant",
     *   "description": "My tenant",
     *   "labels": {
     *     "com.orange.repository.orangecarto/id": "9999"
     *   },
     *   "created_at": "2022-11-02T14:33:07.123Z",
     *   "updated_at": "2022-11-04T15:13:07.123Z"
     * }
     */
    TenantDisplay: {
      /**
       * Tenant name
       * @example my-tenant
       */
      name: string;
      /** Description */
      description: string;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Labels */
      labels?: {
        [key: string]: string;
      };
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
    };
    /**
     * TenantLightDisplay
     * @example {
     *   "name": "my-tenant",
     *   "description": "My tenant"
     * }
     */
    TenantLightDisplay: {
      /**
       * Tenant name
       * @example my-tenant
       */
      name: string;
      /** Description */
      description: string;
      /**
       * Id
       * Format: uuid
       */
      id: string;
    };
    /**
     * TenantUpdate
     * @example {
     *   "name": "My new tenant name",
     *   "description": "My better tenant",
     *   "labels": {
     *     "mylabel": "new_value"
     *   }
     * }
     */
    TenantUpdate: {
      /**
       * Tenant name
       * @example my-tenant
       */
      name?: string;
      /** Labels */
      labels?: {
        [key: string]: string;
      };
      /** Description */
      description?: string;
    };
    /** TlsConfig */
    TlsConfig: {
      /**
       * Insecure Skip Verify
       * @example false
       */
      insecure_skip_verify?: boolean;
      /** Server Name */
      server_name?: string;
      /**
       * Min Version
       * @enum {string}
       */
      min_version?: "TLS10" | "TLS11" | "TLS12" | "TLS13";
      /**
       * Max Version
       * @enum {string}
       */
      max_version?: "TLS10" | "TLS11" | "TLS12" | "TLS13";
    };
    /**
     * UserCreateBatch
     * @description UserCreateBatch class
     *
     * Attributes:
     *     admins (list[str]): List of admin users
     *     members (list[str]): List of member users
     */
    UserCreateBatch: {
      /**
       * List of admin users
       * @default []
       * @example [
       *   "abcd1234",
       *   "efgh9876"
       * ]
       */
      admins?: string[];
      /**
       * List of member users
       * @default []
       * @example [
       *   "ijkl4321",
       *   "dcba4242"
       * ]
       */
      members?: string[];
    };
    /**
     * UserDisplayBatch
     * @description UserDisplayBatch class
     * Attributes:
     *     admins (list[str]): List of admin users
     *     members (list[str]): List of member users
     */
    UserDisplayBatch: {
      /**
       * List of admin users
       * @default []
       * @example [
       *   "abcd1234",
       *   "efgh9876"
       * ]
       */
      admins?: string[];
      /**
       * List of member users
       * @default []
       * @example [
       *   "ijkl4321",
       *   "dcba4242"
       * ]
       */
      members?: string[];
      /**
       * List of users errors
       * @default {}
       * @example {
       *   "mnop5678": "something bad happened"
       * }
       */
      errors?: {
        [key: string]: string;
      };
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /**
     * VisibilityEnum
     * @description An enumeration.
     * @enum {string}
     */
    VisibilityEnum: "private" | "internal";
    /** VolumeMount */
    VolumeMount: {
      /** Driver */
      driver: string;
      /** Container Dir */
      container_dir: string;
      mode: components["schemas"]["Mode"];
      device_type: components["schemas"]["DeviceType"];
      device: components["schemas"]["Device"];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** List tenants */
  v1_list_tenants: {
    parameters: {
      query?: {
        offset?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TenantLightDisplay"][];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create a new tenant */
  v1_create_tenant: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TenantCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["TenantDisplay"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Read a tenant by id or name */
  v1_read_tenant: {
    parameters: {
      path: {
        target: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TenantDisplay"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update a tenant by id or name */
  v1_update_tenant: {
    parameters: {
      path: {
        target: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TenantUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TenantDisplay"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Gone */
      410: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete a tenant by id or name */
  v1_delete_tenant: {
    parameters: {
      path: {
        target: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Precondition Failed */
      412: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get all users */
  v1_list_users: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string[];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
    };
  };
  /** Create a membership relation for a user (admins, members) */
  v1_create_users: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserCreateBatch"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["UserDisplayBatch"];
        };
      };
      /** @description Partial Content */
      206: {
        content: {
          "application/json": components["schemas"]["UserDisplayBatch"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Remove several users membership relation */
  v1_delete_users: {
    requestBody: {
      content: {
        "application/json": string[];
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get user relations */
  v1_read_user: {
    parameters: {
      path: {
        user: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string[];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Remove user's membership relation */
  v1_delete_user: {
    parameters: {
      path: {
        user: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get all instances */
  v1_list_instances: {
    parameters: {
      query?: {
        offset?: number;
        limit?: number;
      };
      path: {
        instance: components["schemas"]["InstanceEnum"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["InstanceDisplay"][];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create prometheus, alertmanager or victoriametrics instance */
  v1_create_instance: {
    parameters: {
      path: {
        instance: components["schemas"]["InstanceEnum"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["InstanceCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["InstanceDisplay"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Apply given configuration to prometheus or alertmanager instance */
  v1_bind_instance_config: {
    parameters: {
      path: {
        instance: components["schemas"]["InstanceEnum"];
        target: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConfigBind"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Precondition Failed */
      412: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Retrieve instance info from given filter (id or name) */
  v1_read_instance: {
    parameters: {
      path: {
        instance: components["schemas"]["InstanceEnum"];
        target: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["InstanceDisplay"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update instance info from given filter (id or name) */
  v1_update_instance: {
    parameters: {
      path: {
        instance: components["schemas"]["InstanceEnum"];
        target: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["InstanceUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["InstanceDisplay"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Remove instance from given filter (id or name) */
  v1_delete_instance: {
    parameters: {
      path: {
        instance: components["schemas"]["InstanceEnum"];
        target: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get all configurations */
  v1_list_configs: {
    parameters: {
      query?: {
        offset?: number;
        limit?: number;
      };
      path: {
        config: components["schemas"]["ConfigEnum"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ConfigDisplay"][];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create prometheus or alertmanager configuration */
  v1_create_config: {
    parameters: {
      path: {
        config: components["schemas"]["ConfigEnum"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConfigCreate"];
        "application/x-yaml": {
          /**
           * Configuration name
           * @example my-configuration
           */
          name: string;
          /**
           * Configuration description
           * @default
           * @example My comprehensive configuration description
           */
          description?: string;
          /**
           * Configuration data
           * @example {}
           */
          data: unknown;
          /**
           * Configuration identifier
           * Format: uuid
           * @example 00000000-0000-0000-0000-000000000000
           */
          id?: string;
          /** SQLalchemy Tenant db model */
          tenant?: unknown;
        };
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ConfigDisplay"];
          "application/x-yaml": {
            /**
             * Configuration name
             * @example my-configuration
             */
            name: string;
            /**
             * Configuration description
             * @default
             * @example My comprehensive configuration description
             */
            description?: string;
            /**
             * Configuration data
             * @example {}
             */
            data: unknown;
            /**
             * Configuration identifier
             * Format: uuid
             * @example 00000000-0000-0000-0000-000000000000
             */
            id: string;
            /**
             * List of instances running the configuration
             * @example [
             *   "00000000-0000-0000-0000-000000000000",
             *   "11111111-1111-1111-1111-111111111111"
             * ]
             */
            related_instances: string[];
            /**
             * Configuration status
             * @example created
             */
            status?: string;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Retrieve configuration info from given filter (id or name) */
  v1_read_config: {
    parameters: {
      path: {
        config: components["schemas"]["ConfigEnum"];
        target: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ConfigDisplay"];
          "application/x-yaml": {
            /**
             * Configuration name
             * @example my-configuration
             */
            name: string;
            /**
             * Configuration description
             * @default
             * @example My comprehensive configuration description
             */
            description?: string;
            /**
             * Configuration data
             * @example {}
             */
            data: unknown;
            /**
             * Configuration identifier
             * Format: uuid
             * @example 00000000-0000-0000-0000-000000000000
             */
            id: string;
            /**
             * List of instances running the configuration
             * @example [
             *   "00000000-0000-0000-0000-000000000000",
             *   "11111111-1111-1111-1111-111111111111"
             * ]
             */
            related_instances: string[];
            /**
             * Configuration status
             * @example created
             */
            status?: string;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update configuration info from given filter (id or name) */
  v1_update_config: {
    parameters: {
      path: {
        config: components["schemas"]["ConfigEnum"];
        target: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConfigUpdate"];
        "application/x-yaml": {
          /**
           * Configuration name
           * @example my-configuration
           */
          name?: string;
          /**
           * Configuration description
           * @example My comprehensive configuration description
           */
          description?: string;
          /**
           * Configuration data
           * @example {}
           */
          data?: unknown;
          /**
           * Background task status
           * @example pending
           */
          status?: string;
        };
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ConfigDisplay"];
          "application/x-yaml": {
            /**
             * Configuration name
             * @example my-configuration
             */
            name: string;
            /**
             * Configuration description
             * @default
             * @example My comprehensive configuration description
             */
            description?: string;
            /**
             * Configuration data
             * @example {}
             */
            data: unknown;
            /**
             * Configuration identifier
             * Format: uuid
             * @example 00000000-0000-0000-0000-000000000000
             */
            id: string;
            /**
             * List of instances running the configuration
             * @example [
             *   "00000000-0000-0000-0000-000000000000",
             *   "11111111-1111-1111-1111-111111111111"
             * ]
             */
            related_instances: string[];
            /**
             * Configuration status
             * @example created
             */
            status?: string;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Precondition Failed */
      412: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Remove configuration from given filter (id or name) */
  v1_delete_config: {
    parameters: {
      path: {
        config: components["schemas"]["ConfigEnum"];
        target: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Precondition Failed */
      412: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Retrieve configuration status from given filter (id or name) */
  v1_read_config_status: {
    parameters: {
      path: {
        config: components["schemas"]["ConfigEnum"];
        target: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ConfigData"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Retrieve configuration data from given filter (id or name) */
  v1_read_config_data: {
    parameters: {
      path: {
        config: components["schemas"]["ConfigEnum"];
        target: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ConfigData"];
          "application/x-yaml": Record<string, never>;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update configuration data from given filter (id or name) */
  v1_update_config_data: {
    parameters: {
      path: {
        config: components["schemas"]["ConfigEnum"];
        target: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConfigData"];
        "application/x-yaml": Record<string, never>;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ConfigDisplay"];
          "application/x-yaml": {
            /**
             * Configuration name
             * @example my-configuration
             */
            name: string;
            /**
             * Configuration description
             * @default
             * @example My comprehensive configuration description
             */
            description?: string;
            /**
             * Configuration data
             * @example {}
             */
            data: unknown;
            /**
             * Configuration identifier
             * Format: uuid
             * @example 00000000-0000-0000-0000-000000000000
             */
            id: string;
            /**
             * List of instances running the configuration
             * @example [
             *   "00000000-0000-0000-0000-000000000000",
             *   "11111111-1111-1111-1111-111111111111"
             * ]
             */
            related_instances: string[];
            /**
             * Configuration status
             * @example created
             */
            status?: string;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Precondition Failed */
      412: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** API health check */
  v1_healthy: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Message"];
        };
      };
    };
  };
  /** API ready check */
  v1_ready: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Message"];
        };
      };
      /** @description Service Unavailable */
      503: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
    };
  };
  /** Get information about the API */
  v1_about: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["About"];
        };
      };
    };
  };
  /** Retrieve broker catalog of services and plans */
  v2_read_catalog: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Catalog"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
      /** @description Precondition Failed */
      412: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
    };
  };
  /** Get the last requested operation state for service instance. */
  v2_read_instance_last_operation: {
    parameters: {
      query?: {
        service_id?: string;
        plan_id?: string;
        operation?: string;
      };
      header?: {
        "X-Broker-API-Originating-Identity"?: string;
        "X-Broker-API-Request-Identity"?: string;
      };
      path: {
        instance_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PollingInstanceResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
      /** @description Gone */
      410: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
      /** @description Precondition Failed */
      412: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get the last requested operation state for service binding. */
  v2_read_binding_last_operation: {
    parameters: {
      query?: {
        service_id?: string;
        plan_id?: string;
        operation?: string;
      };
      header?: {
        "X-Broker-API-Originating-Identity"?: string;
        "X-Broker-API-Request-Identity"?: string;
      };
      path: {
        instance_id: string;
        binding_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PollingBindingResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
      /** @description Gone */
      410: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
      /** @description Precondition Failed */
      412: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Fetch a service instance. */
  v2_read_service_instance: {
    parameters: {
      query?: {
        service_id?: string;
        plan_id?: string;
      };
      header?: {
        "X-Broker-API-Originating-Identity"?: string;
        "X-Broker-API-Request-Identity"?: string;
      };
      path: {
        instance_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ProvisioningResponseFetch"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
      /** @description Precondition Failed */
      412: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
    };
  };
  /** Provision a service instance. */
  v2_create_service_instance: {
    parameters: {
      query?: {
        accepts_incomplete?: boolean;
      };
      header?: {
        "X-Broker-API-Originating-Identity"?: string;
        "X-Broker-API-Request-Identity"?: string;
      };
      path: {
        instance_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProvisioningRequestCreate"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProvisioningResponseCreate"];
        };
      };
      /** @description Successful Response */
      202: {
        content: {
          "application/json": components["schemas"]["ProvisioningResponseCreate"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
      /** @description Precondition Failed */
      412: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
    };
  };
  /** Delete a service instance. */
  v2_delete_service_instance: {
    parameters: {
      query: {
        service_id: string;
        plan_id: string;
        accepts_incomplete?: boolean;
      };
      header?: {
        "X-Broker-API-Originating-Identity"?: string;
        "X-Broker-API-Request-Identity"?: string;
      };
      path: {
        instance_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProvisioningResponseDelete"];
        };
      };
      /** @description Successful Response */
      202: {
        content: {
          "application/json": components["schemas"]["ProvisioningResponseDelete"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
      /** @description Gone */
      410: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
      /** @description Precondition Failed */
      412: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
    };
  };
  /** Update a service instance. */
  v2_update_service_instance: {
    parameters: {
      query?: {
        accepts_incomplete?: boolean;
      };
      header?: {
        "X-Broker-API-Originating-Identity"?: string;
        "X-Broker-API-Request-Identity"?: string;
      };
      path: {
        instance_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProvisioningRequestUpdate"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProvisioningResponseUpdate"];
        };
      };
      /** @description Successful Response */
      202: {
        content: {
          "application/json": components["schemas"]["ProvisioningResponseUpdate"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
      /** @description Precondition Failed */
      412: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
    };
  };
  /** Fetch a service instance binding. */
  v2_read_service_binding: {
    parameters: {
      query?: {
        service_id?: string;
        plan_id?: string;
      };
      header?: {
        "X-Broker-API-Originating-Identity"?: string;
        "X-Broker-API-Request-Identity"?: string;
      };
      path: {
        instance_id: string;
        binding_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BindingResponseFetch"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
      /** @description Precondition Failed */
      412: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create or rotate on a service instance binding. */
  v2_create_service_binding: {
    parameters: {
      query?: {
        accepts_incomplete?: boolean;
      };
      header?: {
        "X-Broker-API-Originating-Identity"?: string;
        "X-Broker-API-Request-Identity"?: string;
      };
      path: {
        instance_id: string;
        binding_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BindingRequestCreate"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["BindingResponseCreate"];
        };
      };
      /** @description Successful Response */
      202: {
        content: {
          "application/json": components["schemas"]["BindingResponseCreateAsync"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
      /** @description Precondition Failed */
      412: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
    };
  };
  /** Delete a service instance binding. */
  v2_delete_service_binding: {
    parameters: {
      query: {
        service_id: string;
        plan_id: string;
        accepts_incomplete?: boolean;
      };
      header?: {
        "X-Broker-API-Originating-Identity"?: string;
        "X-Broker-API-Request-Identity"?: string;
      };
      path: {
        instance_id: string;
        binding_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BindingResponseDelete"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
      /** @description Gone */
      410: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
      /** @description Precondition Failed */
      412: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["BrokerError"];
        };
      };
    };
  };
}
